var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Answer.html",[0,1.552,1,1.552]],["body/entities/Answer.html",[0,2.003,1,2.003,2,0.703,3,0.237,4,0.209,5,0.209,6,0.518,7,2.701,8,0.182,9,0.642,10,4.349,11,3.144,12,2.308,13,1.725,14,1.243,15,3.45,16,0.462,17,0.025,18,1.689,19,1.961,20,3.93,21,0.561,22,3.185,23,2.994,24,2.143,25,2.994,26,3.185,27,2.003,28,3.45,29,3.185,30,3.327,31,3.773,32,3.185,33,2.994,34,3.773,35,2.15,36,3.185,37,3.185,38,0.382,39,2.994,40,3.834,41,1.1,42,2.381,43,2.381,44,0.237,45,0.193,46,0.016,47,0.016]],["title/classes/AnswerQuestionComand.html",[45,0.209,48,2.114]],["body/classes/AnswerQuestionComand.html",[2,0.837,3,0.282,4,0.249,5,0.249,6,0.498,8,0.217,9,0.723,14,1.302,16,0.417,17,0.024,21,0.52,38,0.417,44,0.282,45,0.23,46,0.017,47,0.017,48,3.07,49,0.783,50,4.462,51,3.215,52,1.523,53,3.439,54,3.318,55,1.82,56,1.934,57,1.342,58,2.324,59,3.804,60,3.792,61,0.837,62,0.732,63,0.837,64,3.792,65,3.792,66,1.016,67,1.706]],["title/classes/AnswerQuestionComandHandler.html",[45,0.209,68,2.32]],["body/classes/AnswerQuestionComandHandler.html",[1,2.392,2,0.554,3,0.187,4,0.165,5,0.165,6,0.414,8,0.143,9,0.54,10,2.126,12,1.128,13,1.494,14,0.723,15,1.687,16,0.333,17,0.025,21,0.415,38,0.452,41,0.866,44,0.187,45,0.152,46,0.013,47,0.013,48,3.044,49,0.518,50,3.713,52,1.138,55,0.716,56,0.812,57,1.003,61,0.826,62,0.723,63,0.826,66,0.672,68,2.518,69,1.874,70,2.745,71,2.053,72,1.925,73,1.213,74,1.76,75,2.108,76,2.507,77,2.791,78,3.798,79,4.479,80,4.968,81,3.743,82,3.743,83,2.294,84,2.507,85,2.294,86,0.812,87,1.948,88,1.537,89,2.507,90,1.948,91,1.053,92,2.507,93,0.63,94,1.305,95,0.985,96,1.537,97,1.128,98,2.507,99,1.128,100,1.412,101,1.305,102,2.507,103,2.507,104,1.687,105,2.507,106,0.985,107,1.511,108,2.507,109,1.412,110,2.507,111,1.573,112,2.518,113,1.874,114,1.948,115,1.573,116,2.126,117,1.808,118,1.471,119,2.331,120,2.108,121,2.126,122,1.874,123,2.507,124,2.126,125,2.507,126,2.507,127,2.507,128,2.507,129,2.507,130,2.507,131,1.537,132,1.874,133,0.812,134,2.126]],["title/classes/AnswerQuestionDto.html",[45,0.209,59,2.114]],["body/classes/AnswerQuestionDto.html",[1,2.889,3,0.289,4,0.255,5,0.255,6,0.474,8,0.222,9,0.734,12,2.291,13,1.615,16,0.379,17,0.025,18,1.548,19,1.649,21,0.472,27,2.291,38,0.289,44,0.289,45,0.308,46,0.018,47,0.018,49,0.803,59,3.12,112,3.82,135,4.815,136,2.905,137,2.905,138,3.294,139,3.294,140,3.294,141,5.092,142,5.092,143,3.48,144,4.317,145,3.12,146,1.877,147,2.867,148,2.905,149,3.886,150,3.886,151,3.294]],["title/controllers/AppController.html",[152,1.552,153,2.32]],["body/controllers/AppController.html",[3,0.333,4,0.294,5,0.294,8,0.255,17,0.025,18,1.694,19,1.449,21,0.415,38,0.414,44,0.333,45,0.271,46,0.019,47,0.019,55,1.277,73,1.805,86,1.449,93,1.124,133,1.449,152,2.507,153,3.747,154,2.328,155,3.792,156,5.383,157,4.473,158,3.416,159,3.792,160,3.344,161,4.473]],["title/modules/AppModule.html",[162,2.32,163,2.32]],["body/modules/AppModule.html",[3,0.256,4,0.226,5,0.226,16,0.256,17,0.025,35,2.27,38,0.481,44,0.256,45,0.209,46,0.016,47,0.016,93,0.866,95,1.354,153,3.596,154,2.445,158,3.492,159,2.921,162,3.16,163,4.345,164,2.112,165,2.879,166,2.921,167,2.921,168,2.921,169,3.801,170,3.512,171,2.576,172,2.576,173,3.446,174,3.983,175,3.983,176,3.446,177,2.318,178,4.699,179,2.921,180,2.921,181,3.446,182,3.446,183,2.921,184,3.446,185,3.16,186,3.446,187,3.446,188,3.446,189,3.446,190,3.446,191,2.921,192,3.446,193,2.576,194,3.446,195,3.446,196,3.446,197,1.94,198,3.446,199,2.576,200,3.446,201,3.446,202,2.921,203,3.446,204,3.446,205,3.446]],["title/injectables/AppService.html",[158,1.942,206,1.942]],["body/injectables/AppService.html",[3,0.348,4,0.307,5,0.307,8,0.268,17,0.024,18,1.743,21,0.434,38,0.348,44,0.348,45,0.283,46,0.02,47,0.02,73,1.857,86,1.517,93,1.177,133,1.517,156,5.471,158,3.227,206,3.227,207,3.501,208,3.971,209,4.683,210,4.683,211,4.683]],["title/classes/AskQuestionCommand.html",[45,0.209,212,2.114]],["body/classes/AskQuestionCommand.html",[2,0.837,3,0.282,4,0.249,5,0.249,6,0.498,8,0.217,9,0.723,14,1.302,16,0.417,17,0.024,21,0.52,38,0.417,44,0.282,45,0.23,46,0.017,47,0.017,49,0.783,52,1.523,53,3.439,54,3.318,55,1.82,56,1.934,57,1.342,58,2.324,61,0.837,62,0.732,63,0.837,66,1.016,67,1.706,212,3.07,213,4.462,214,3.215,215,3.804,216,3.792,217,3.792,218,3.792]],["title/classes/AskQuestionCommandHandler.html",[45,0.209,219,2.32]],["body/classes/AskQuestionCommandHandler.html",[2,0.648,3,0.219,4,0.193,5,0.193,6,0.447,8,0.168,9,0.606,13,1.579,14,0.811,15,1.976,16,0.365,17,0.025,21,0.455,38,0.452,41,1.014,44,0.219,45,0.178,46,0.015,47,0.015,49,0.607,52,1.278,55,1.529,56,0.952,57,1.126,61,0.928,62,0.811,63,0.928,66,0.787,69,2.196,70,3.007,71,1.972,72,2.035,73,1.362,74,1.929,75,2.366,77,2.848,83,2.576,85,3.007,86,0.952,87,2.187,88,1.8,93,0.738,94,1.529,95,1.155,99,1.322,100,1.654,101,1.529,104,1.976,106,1.155,107,1.278,109,1.654,111,2.062,114,1.529,115,1.234,117,1.419,118,1.155,119,1.529,120,1.654,124,2.491,131,1.8,132,2.196,133,0.952,212,3.283,213,4.004,219,2.827,220,1.976,221,4.203,222,2.938,223,2.938,224,2.938,225,2.938,226,3.142,227,2.938,228,2.491,229,2.938]],["title/classes/AskQuestionDto.html",[45,0.209,215,2.114]],["body/classes/AskQuestionDto.html",[3,0.288,4,0.254,5,0.254,6,0.473,8,0.221,9,0.733,13,1.797,16,0.378,17,0.024,18,1.83,19,1.646,21,0.471,38,0.288,44,0.288,45,0.307,46,0.018,47,0.018,49,0.8,56,1.646,136,2.895,137,3.797,138,3.283,140,3.283,143,3.474,145,3.474,146,1.871,147,2.86,215,3.113,226,4.672,230,4.806,231,5.08,232,5.08,233,3.872,234,3.872,235,3.872,236,3.872,237,5.08]],["title/controllers/AuthController.html",[152,1.552,238,2.32]],["body/controllers/AuthController.html",[3,0.231,4,0.204,5,0.204,6,0.422,8,0.177,16,0.325,17,0.025,19,1.416,21,0.405,38,0.431,44,0.231,45,0.188,46,0.015,47,0.015,55,1.248,56,1.875,61,0.965,62,0.844,63,0.965,66,0.832,67,1.397,71,1.143,72,1.746,73,1.416,74,2.359,86,1.416,91,1.304,93,0.78,106,1.22,107,0.944,115,1.836,133,1.416,152,2.276,154,1.615,160,2.32,238,2.94,239,2.632,240,2.32,241,2.632,242,4.371,243,4.371,244,3.104,245,3.365,246,4.371,247,3.104,248,2.94,249,3.104,250,3.365,251,3.1,252,3.104,253,2.32,254,2.32,255,3.781,256,1.902,257,1.902,258,2.088,259,2.32,260,2.088,261,3.104,262,3.104,263,3.104,264,3.267,265,4.371,266,3.104,267,2.94,268,2.94,269,2.94,270,3.267,271,3.267,272,3.267,273,3.104,274,3.267,275,3.104,276,3.104,277,3.104,278,3.104]],["title/guards/AuthGuard.html",[279,2.579,280,2.114]],["body/guards/AuthGuard.html",[2,0.617,3,0.208,4,0.183,5,0.183,6,0.398,8,0.16,14,0.54,16,0.302,17,0.025,18,0.85,21,0.376,35,1.35,38,0.431,41,0.965,44,0.208,45,0.169,46,0.014,47,0.014,52,0.85,57,1.086,61,0.895,62,0.783,63,0.895,71,1.757,73,1.314,74,1.876,77,2.889,86,0.906,87,2.11,90,1.455,91,1.174,93,0.703,94,1.455,95,1.099,107,1.451,111,2.335,114,1.455,115,1.174,117,1.35,118,1.099,119,2.483,133,0.906,177,1.88,206,2.283,241,2.37,280,2.485,281,2.089,282,4.046,283,2.37,284,5.235,285,2.795,286,4.333,287,5.07,288,2.795,289,4.055,290,4.438,291,2.795,292,2.795,293,1.713,294,2.089,295,3.031,296,2.795,297,2.795,298,4.055,299,2.795,300,3.913,301,4.772,302,4.055,303,1.574,304,2.795,305,4.055,306,1.713,307,4.772,308,2.37,309,2.795,310,2.687,311,2.795,312,2.795,313,2.37,314,2.37]],["title/classes/DatabaseException.html",[45,0.209,99,1.552]],["body/classes/DatabaseException.html",[3,0.303,4,0.267,5,0.267,8,0.233,9,0.757,16,0.391,17,0.024,21,0.487,38,0.303,44,0.303,45,0.247,46,0.018,47,0.018,49,0.841,55,1.658,57,1.091,61,0.899,62,0.786,63,0.899,71,2.139,72,2.245,90,3.023,91,1.712,93,1.024,99,2.362,106,1.601,107,1.239,118,2.412,199,3.045,315,4.925,316,3.454,317,5.25,318,5.25,319,5.25,320,4.074,321,3.454,322,3.925,323,4.074,324,4.074,325,4.074]],["title/classes/HttpErrorFilter.html",[45,0.209,185,2.32]],["body/classes/HttpErrorFilter.html",[3,0.234,4,0.206,5,0.206,8,0.179,9,0.636,16,0.328,17,0.025,21,0.472,38,0.328,44,0.234,45,0.19,46,0.015,47,0.015,49,0.649,52,1.34,55,1.453,57,1.364,61,0.693,62,0.606,63,0.693,71,1.874,72,2.136,73,1.427,86,1.017,90,2.872,91,1.319,93,0.789,101,1.634,106,1.234,107,1.34,111,2.531,117,2.666,118,2.284,185,2.963,191,4.315,269,2.112,295,4.125,321,3.735,322,2.347,326,4.678,327,2.662,328,5.09,329,4.406,330,4.406,331,5.518,332,3.14,333,5.09,334,2.662,335,2.662,336,3.14,337,3.14,338,3.14,339,3.14,340,4.406,341,3.14,342,3.14,343,2.662,344,3.14,345,3.14,346,3.735,347,4.406,348,4.406,349,4.406,350,3.14,351,3.14,352,3.14,353,3.14]],["title/injectables/IsValueExistConstraint.html",[206,1.942,354,2.114]],["body/injectables/IsValueExistConstraint.html",[2,0.657,3,0.222,4,0.195,5,0.195,6,0.45,8,0.17,14,0.575,16,0.368,17,0.025,18,1.29,21,0.459,35,2.05,38,0.424,41,1.028,44,0.316,45,0.257,46,0.015,47,0.015,52,0.905,57,0.798,61,1.091,62,0.954,63,1.091,71,1.096,73,1.375,74,2.118,86,1.375,93,0.748,95,1.17,111,1.783,133,1.845,146,2.05,202,2.524,206,2.389,207,2.226,248,2.854,354,3.03,355,2.226,356,4.244,357,4.244,358,2.978,359,5.922,360,2.978,361,4.244,362,6.095,363,2.978,364,4.244,365,4.244,366,2.978,367,2.978,368,4.244,369,4.192,370,4.244,371,4.244,372,2.978,373,4.244,374,4.244,375,3.172,376,2.978,377,2.978,378,2.978,379,2.978,380,2.978,381,2.978,382,2.978,383,3.598,384,2.524,385,2.978,386,4.944,387,2.978,388,2.978,389,2.524,390,2.978]],["title/entities/Question.html",[0,1.552,13,0.924]],["body/entities/Question.html",[0,1.711,1,2.747,2,0.565,3,0.19,4,0.168,5,0.168,6,0.526,8,0.146,9,0.548,11,2.779,12,2.041,13,1.019,14,1.178,15,3.05,16,0.469,17,0.025,18,1.708,19,2.012,20,4.106,21,0.576,23,2.557,24,1.722,25,2.557,27,2.258,28,3.05,30,1.914,33,2.557,34,4.255,35,2.714,38,0.373,39,2.557,40,2.842,41,0.884,43,1.914,44,0.19,45,0.155,46,0.013,47,0.013,226,3.39,228,3.845,303,2.141,391,2.17,392,3.845,393,4.535,394,2.779,395,3.223,396,3.802,397,2.56,398,2.56,399,2.56,400,2.56,401,3.802,402,2.56,403,3.802,404,2.56,405,2.56,406,2.56,407,2.56,408,2.924,409,3.802,410,2.56,411,3.845,412,2.17,413,2.17,414,3.223]],["title/controllers/QuestionController.html",[152,1.552,415,2.32]],["body/controllers/QuestionController.html",[1,1.065,2,0.522,3,0.176,4,0.155,5,0.155,6,0.403,8,0.135,13,1.518,14,1.248,16,0.322,17,0.025,19,1.401,21,0.401,38,0.445,44,0.176,45,0.143,46,0.012,47,0.012,48,1.45,55,1.235,56,1.767,57,0.634,59,2.957,61,0.955,62,0.835,63,0.955,66,0.634,67,1.065,71,1.593,72,1.494,73,1.161,74,2.348,86,1.401,91,0.994,93,0.595,97,1.065,106,0.93,107,0.72,115,1.818,133,1.401,152,2.171,154,1.232,212,1.45,215,2.957,240,1.769,248,2.91,253,1.769,254,1.769,255,3.234,258,1.592,259,1.769,260,1.592,264,3.234,267,2.91,269,2.91,270,3.234,271,2.679,272,3.234,274,2.679,280,1.45,281,1.769,415,2.411,416,2.006,417,4.326,418,3.584,419,3.584,420,2.367,421,2.367,422,2.367,423,2.367,424,2.367,425,2.367,426,2.367,427,2.957,428,2.367,429,3.668,430,2.367,431,2.679,432,2.006,433,2.006,434,2.367,435,2.367,436,3.584,437,4.326,438,1.45,439,2.006,440,2.91,441,3.668,442,2.367,443,2.006,444,2.367,445,2.367,446,2.367,447,2.367,448,2.367,449,2.367,450,2.367,451,2.367,452,2.367,453,2.367,454,2.367,455,2.367,456,2.367,457,2.367,458,2.367,459,2.367,460,2.367,461,2.367,462,2.367,463,2.367,464,2.367]],["title/classes/SignInCommand.html",[45,0.209,256,2.114]],["body/classes/SignInCommand.html",[3,0.312,4,0.276,5,0.276,6,0.492,8,0.24,9,0.772,16,0.398,17,0.024,21,0.496,38,0.398,44,0.312,45,0.254,46,0.019,47,0.019,49,0.867,52,1.628,53,3.611,54,2.786,55,1.682,56,2.01,57,1.125,58,2.573,61,0.927,62,0.81,63,0.927,66,1.125,67,1.889,245,3.928,256,3.28,465,3.611,466,3.56,467,4.199,468,4.199,469,2.824]],["title/classes/SignInCommandHandler.html",[45,0.209,470,2.32]],["body/classes/SignInCommandHandler.html",[2,0.566,3,0.191,4,0.168,5,0.168,6,0.419,8,0.147,9,0.549,14,0.877,16,0.338,17,0.025,21,0.421,38,0.462,41,0.886,44,0.191,45,0.155,46,0.013,47,0.013,49,0.53,52,1.158,56,0.831,57,1.02,61,0.841,62,0.735,63,0.841,66,0.687,70,2.783,71,1.976,72,1.941,73,1.234,74,1.785,75,2.144,77,2.717,83,2.334,85,2.783,86,0.831,87,1.982,88,1.573,90,2.363,91,1.078,93,0.645,94,1.335,95,1.009,96,1.573,97,1.155,99,1.155,100,1.445,101,1.335,106,1.009,107,1.528,109,1.445,111,2.111,113,1.918,114,1.335,115,1.6,117,1.24,118,1.009,119,2.363,120,1.445,122,2.847,131,1.573,133,0.831,197,1.445,220,1.726,256,3.079,268,1.726,286,4.352,293,1.573,294,1.918,300,2.847,310,2.557,314,2.175,465,3.079,470,2.562,471,2.175,472,3.808,473,2.566,474,2.175,475,1.918,476,2.566,477,2.566,478,2.566,479,5.368,480,3.808,481,2.847,482,3.808,483,2.566,484,2.175,485,2.566]],["title/classes/SignInDto.html",[45,0.209,245,2.114]],["body/classes/SignInDto.html",[3,0.289,4,0.255,5,0.255,6,0.474,8,0.222,9,0.734,16,0.379,17,0.025,18,1.833,19,1.649,21,0.472,38,0.289,44,0.289,45,0.308,46,0.018,47,0.018,49,0.803,137,2.905,143,3.48,145,3.48,146,1.877,147,2.867,197,3.523,245,3.12,251,3.12,268,3.425,310,3.523,486,4.245,487,3.294,488,3.886,489,3.886,490,5.109,491,5.092,492,3.886,493,4.317,494,3.886,495,3.886]],["title/classes/SignUpCommand.html",[45,0.209,257,2.114]],["body/classes/SignUpCommand.html",[3,0.309,4,0.272,5,0.272,6,0.489,8,0.237,9,0.767,16,0.395,17,0.024,21,0.493,38,0.395,44,0.309,45,0.251,46,0.019,47,0.019,49,0.857,52,1.616,53,3.592,54,2.765,55,1.673,56,2.002,57,1.112,58,2.544,61,0.916,62,0.801,63,0.916,66,1.112,67,1.868,250,3.915,257,3.257,465,3.592,469,2.792,496,4.382,497,3.519,498,4.151,499,4.151]],["title/classes/SignUpCommandHandler.html",[45,0.209,500,2.32]],["body/classes/SignUpCommandHandler.html",[2,0.556,3,0.187,4,0.165,5,0.165,6,0.415,8,0.144,9,0.542,14,0.486,16,0.334,17,0.025,18,0.766,21,0.417,38,0.46,41,0.87,44,0.187,45,0.152,46,0.013,47,0.013,49,0.52,52,1.142,55,1.282,56,0.816,57,1.006,61,0.829,62,0.725,63,0.829,66,0.675,70,2.753,71,1.961,72,1.928,73,1.217,74,1.765,75,2.115,77,2.698,83,2.302,85,2.302,86,0.816,87,1.955,88,1.544,90,1.955,91,1.058,93,0.633,94,1.311,95,0.99,96,1.544,97,1.133,99,1.133,100,1.418,101,1.311,106,0.99,107,1.366,109,1.418,111,2.238,114,1.955,115,1.887,117,1.815,118,1.765,119,1.955,120,1.418,133,0.816,197,1.418,220,1.694,257,3.051,268,1.694,286,4.325,293,1.544,294,1.883,300,2.808,310,2.529,322,1.883,465,3.051,474,2.135,475,1.883,481,3.358,484,2.135,496,3.722,500,2.526,501,2.135,502,3.756,503,2.519,504,2.519,505,2.519,506,2.519,507,2.519,508,2.808,509,2.808,510,3.756,511,2.519,512,2.519,513,2.519,514,2.519,515,2.519,516,3.756,517,2.519,518,2.519]],["title/classes/SignUpDto.html",[45,0.209,250,2.114]],["body/classes/SignUpDto.html",[2,0.665,3,0.224,4,0.198,5,0.198,6,0.477,8,0.172,9,0.617,14,0.581,16,0.403,17,0.025,18,1.9,19,1.754,21,0.502,38,0.37,44,0.224,45,0.259,46,0.015,47,0.015,49,0.622,62,0.825,97,1.355,143,3.319,145,3.506,146,1.454,147,3.049,151,3.626,197,3.221,250,2.621,310,3.221,486,4.276,490,5.297,493,3.626,508,3.718,509,3.718,519,2.552,520,3.01,521,3.01,522,4.277,523,3.01,524,3.01,525,4.277,526,3.01,527,3.01,528,4.277,529,3.01,530,3.01,531,4.277,532,4.277,533,4.277,534,4.277,535,4.277,536,4.277,537,2.552,538,3.626,539,4.277,540,3.718,541,3.01,542,3.01,543,3.01,544,3.01,545,3.01,546,3.01]],["title/modules/StackApiModule.html",[162,2.32,169,2.114]],["body/modules/StackApiModule.html",[1,2.003,2,0.703,3,0.237,4,0.209,5,0.209,6,0.266,13,1.192,14,0.615,17,0.025,35,1.539,38,0.49,44,0.237,45,0.193,46,0.016,47,0.016,62,0.615,66,0.853,93,0.801,95,1.252,97,1.433,107,1.353,154,2.669,162,2.994,164,1.952,165,2.727,169,3.71,170,3.327,171,2.381,172,2.381,174,3.773,175,2.701,177,2.143,180,2.701,183,2.701,238,3.45,258,2.143,287,2.701,293,1.952,308,2.701,354,3.71,389,2.701,408,2.316,415,3.45,439,2.701,547,2.701,548,2.701,549,3.185,550,3.45,551,4.451,552,3.185,553,3.327,554,3.327,555,3.185,556,4.451,557,2.701,558,3.185,559,3.185,560,3.185,561,3.185,562,3.185,563,3.185,564,3.185,565,3.185,566,4.451,567,3.185,568,3.185,569,3.185,570,3.185,571,3.185,572,3.185]],["title/entities/User.html",[0,1.552,14,0.666]],["body/entities/User.html",[0,1.769,1,2.78,2,0.591,3,0.199,4,0.176,5,0.176,6,0.524,8,0.153,9,0.567,11,2.854,12,2.095,13,1.655,14,0.759,16,0.467,17,0.025,18,1.841,19,2.001,20,3.842,21,0.573,23,2.644,24,1.802,25,2.644,27,1.769,28,3.132,35,2.759,38,0.382,39,2.644,41,0.925,42,2.003,44,0.199,45,0.162,46,0.014,47,0.014,310,2.622,394,2.854,395,3.948,408,2.972,411,4.35,412,2.271,413,2.271,481,3.481,508,3.481,509,3.481,537,2.271,573,2.271,574,2.679,575,3.931,576,3.931,577,2.679,578,3.931,579,2.679,580,2.679,581,3.931,582,2.679,583,2.679,584,2.679,585,2.679,586,3.931,587,2.679,588,3.931,589,2.679,590,3.931]],["title/classes/ViewQuestionsQuery.html",[45,0.209,438,2.114]],["body/classes/ViewQuestionsQuery.html",[3,0.312,4,0.276,5,0.276,6,0.492,8,0.24,9,0.772,16,0.398,17,0.024,21,0.496,38,0.398,44,0.312,45,0.254,46,0.019,47,0.019,49,0.867,52,1.628,54,2.786,55,1.682,57,1.125,61,0.927,62,0.81,63,0.927,66,1.125,67,1.889,427,3.928,431,4.639,438,3.28,469,2.824,591,4.405,592,3.56,593,5.893,594,4.199,595,4.199,596,4.199]],["title/classes/ViewQuestionsQueryDto.html",[45,0.209,427,2.114]],["body/classes/ViewQuestionsQueryDto.html",[3,0.277,4,0.245,5,0.245,6,0.464,8,0.213,9,0.715,16,0.459,17,0.025,19,1.605,21,0.459,27,3.025,38,0.369,44,0.277,45,0.337,46,0.017,47,0.017,49,0.77,146,1.801,147,2.789,148,2.786,303,2.789,306,2.284,427,3.036,538,4.717,597,4.717,598,3.16,599,4.717,600,4.717,601,4.954,602,3.727,603,5.026,604,4.954,605,4.2,606,3.727,607,4.954,608,3.16,609,5.564]],["title/classes/ViewQuestionsQueryHandler.html",[45,0.209,610,2.32]],["body/classes/ViewQuestionsQueryHandler.html",[2,0.652,3,0.22,4,0.194,5,0.194,6,0.448,8,0.169,9,0.609,11,1.81,13,0.791,16,0.366,17,0.025,21,0.456,38,0.452,41,1.02,44,0.22,45,0.179,46,0.015,47,0.015,49,0.61,52,1.283,57,1.13,61,0.931,62,0.814,63,0.931,66,0.791,71,1.977,72,2.039,73,1.367,74,1.935,75,2.376,77,2.853,86,0.957,87,2.196,93,0.742,94,1.537,95,1.161,99,1.329,100,1.663,101,1.537,104,1.987,106,1.161,107,1.283,109,1.663,111,1.773,114,1.537,115,1.241,117,1.427,118,1.161,119,1.537,120,1.663,131,1.81,133,0.957,220,1.987,303,1.663,429,4.173,431,2.208,433,4.173,438,3.291,591,4.014,599,3.577,600,3.577,605,2.504,610,2.838,611,2.504,612,4.922,613,4.219,614,4.219,615,2.954,616,2.954,617,2.954,618,2.954,619,2.954,620,2.954,621,2.954,622,2.954,623,2.954,624,2.954,625,2.954]],["title/classes/VoteCommand.html",[45,0.209,626,2.114]],["body/classes/VoteCommand.html",[2,0.855,3,0.288,4,0.254,5,0.254,6,0.502,8,0.221,9,0.733,14,1.306,16,0.422,17,0.024,21,0.526,38,0.422,44,0.288,45,0.234,46,0.018,47,0.018,49,0.8,52,1.545,53,3.474,54,3.252,55,1.831,56,1.95,57,1.037,58,2.373,61,0.855,62,0.747,63,0.855,66,1.037,67,1.742,469,2.605,626,3.113,627,3.283,628,3.83,629,3.872,630,5.08]],["title/classes/VoteCommandHandler.html",[45,0.209,631,2.32]],["body/classes/VoteCommandHandler.html",[2,0.4,3,0.135,4,0.119,5,0.119,6,0.381,8,0.103,9,0.42,12,2.056,13,1.474,14,0.805,16,0.34,17,0.025,21,0.387,27,2.308,33,1.218,35,1.405,38,0.397,41,0.625,44,0.135,45,0.11,46,0.01,47,0.01,49,0.374,52,0.884,55,1.04,56,0.587,57,0.779,61,0.805,62,0.703,63,0.805,66,0.485,70,2.234,71,1.683,72,1.685,73,0.942,74,1.918,75,1.638,77,2.478,78,3.09,83,1.782,85,2.234,86,0.942,87,2.172,88,1.11,90,1.897,91,0.761,93,0.455,94,0.942,95,0.712,96,1.11,97,0.815,99,0.815,100,1.02,101,0.942,104,1.218,106,0.712,107,1.673,109,1.02,111,1.531,112,2.452,113,2.174,114,2.54,115,2.424,116,2.466,117,2.358,118,1.918,119,2.775,120,2.748,121,1.535,122,2.174,131,1.782,132,1.354,133,1.181,134,3.09,251,2.234,267,1.218,303,1.02,306,2.557,346,1.535,392,4.137,394,1.782,408,1.514,626,2.557,631,1.956,632,1.535,633,2.909,634,1.811,635,2.909,636,2.909,637,1.811,638,2.909,639,4.173,640,1.811,641,1.811,642,1.811,643,1.811,644,1.811,645,3.283,646,3.645,647,1.811,648,1.811,649,2.909,650,1.811,651,1.811,652,1.811,653,2.909,654,1.535,655,4.173,656,1.811,657,1.811,658,1.811,659,1.811,660,1.811,661,1.811,662,1.811,663,1.811,664,1.811]],["title/controllers/VoteController.html",[152,1.552,550,2.32]],["body/controllers/VoteController.html",[2,0.726,3,0.245,4,0.216,5,0.216,6,0.38,8,0.188,13,0.882,14,1.233,16,0.245,17,0.025,19,1.066,21,0.305,38,0.475,44,0.245,45,0.199,46,0.016,47,0.016,54,1.712,55,1.299,56,1.691,61,0.726,62,0.635,63,0.726,66,0.882,67,1.481,72,1.802,73,1.475,74,2.051,86,1.066,91,1.382,93,0.827,97,1.481,106,1.293,107,1.001,115,1.382,133,1.066,152,2.048,154,1.712,160,2.46,240,2.46,248,2.213,253,3.403,254,2.46,255,3.901,258,2.213,259,2.46,260,2.213,264,2.46,267,2.213,269,2.213,270,2.46,271,2.46,272,2.46,274,2.46,280,2.017,281,2.46,394,2.79,432,2.79,440,3.062,441,3.859,443,2.79,550,3.062,626,2.017,628,3.451,665,2.79,666,4.552,667,3.291,668,3.291,669,3.291,670,3.291,671,3.291,672,3.291,673,3.291,674,3.291,675,3.291]],["title/classes/VoteDto.html",[45,0.209,628,2.114]],["body/classes/VoteDto.html",[3,0.286,4,0.252,5,0.252,6,0.471,8,0.22,9,0.729,12,2.275,13,1.355,16,0.447,17,0.025,18,1.538,19,1.638,21,0.469,27,2.275,38,0.376,44,0.286,45,0.306,46,0.018,47,0.018,49,0.794,97,1.73,112,3.8,139,3.26,143,3.462,144,4.287,145,3.099,146,1.858,147,2.847,251,2.356,306,2.356,394,3.678,628,3.099,645,4.037,676,3.26,677,3.845,678,3.845,679,3.845,680,5.057,681,5.057,682,3.845,683,3.845]],["title/entities/Votes.html",[0,1.552,408,1.795]],["body/entities/Votes.html",[0,2.087,2,0.747,3,0.252,4,0.222,5,0.222,6,0.514,8,0.193,9,0.669,11,3.245,12,2.382,13,1.748,14,1.259,16,0.459,17,0.025,18,1.411,19,1.934,20,3.561,21,0.554,23,3.12,24,2.275,25,3.12,27,2.087,28,3.561,30,3.468,31,3.933,33,3.12,38,0.394,39,3.12,40,3.958,41,1.168,42,2.528,43,2.528,44,0.252,45,0.205,46,0.016,47,0.016,408,2.414,645,3.561,684,2.867,685,3.382,686,3.382,687,3.382,688,3.382,689,3.382]],["title/coverage.html",[690,3.515]],["body/coverage.html",[0,2.113,1,1.01,5,0.147,6,0.574,7,1.903,13,0.602,14,0.433,16,0.167,17,0.024,45,0.401,46,0.012,47,0.012,48,1.376,50,2.574,51,1.903,59,1.376,68,1.51,69,2.574,72,0.775,99,1.01,107,0.683,118,0.882,135,1.903,136,2.574,152,2.113,153,1.51,155,1.903,158,1.264,185,1.51,193,1.678,206,1.939,208,1.903,212,1.376,213,2.574,214,1.903,215,1.376,219,1.51,230,1.903,238,1.51,239,1.903,245,1.376,250,1.376,256,1.376,257,1.376,279,1.678,280,1.376,282,1.903,283,1.903,303,3.879,315,1.903,316,1.903,326,1.903,327,1.903,354,1.376,355,2.574,383,2.919,391,1.903,408,1.168,415,1.51,416,1.903,427,1.376,438,1.376,440,1.51,465,2.878,466,1.903,470,1.51,471,1.903,486,2.574,487,1.903,496,2.574,497,1.903,500,1.51,501,1.903,519,1.903,540,1.678,550,1.51,553,1.678,554,1.678,573,1.903,591,2.574,592,1.903,597,1.903,598,1.903,610,1.51,611,1.903,626,1.376,627,1.903,628,1.376,631,1.51,632,1.903,665,1.903,676,1.903,684,1.903,690,1.678,691,2.245,692,2.245,693,2.245,694,4.188,695,3.131,696,1.903,697,6.111,698,5.065,699,5.345,700,6.111,701,1.903,702,2.245,703,5.065,704,5.065,705,2.245,706,2.245,707,1.903,708,1.903,709,2.245,710,2.245]],["title/dependencies.html",[165,2.542,711,2.445]],["body/dependencies.html",[17,0.025,41,1.422,45,0.32,46,0.018,47,0.018,66,1.104,93,1.035,95,1.619,146,1.99,165,2.525,177,2.771,179,3.493,260,2.771,293,2.525,334,3.493,475,3.08,557,3.493,608,3.493,712,6.163,713,4.12,714,5.288,715,4.12,716,4.12,717,4.12,718,4.12,719,4.12,720,4.12,721,4.12,722,4.12,723,4.12,724,4.12,725,4.12,726,4.12,727,4.12,728,4.12,729,4.12,730,4.12,731,4.12,732,4.12,733,4.12,734,4.12,735,4.12,736,4.12,737,4.12,738,4.12]],["title/miscellaneous/enumerations.html",[739,1.624,740,3.516]],["body/miscellaneous/enumerations.html",[6,0.465,8,0.255,12,2.013,13,1.198,14,0.863,17,0.024,46,0.019,47,0.019,96,3.414,118,1.758,197,2.519,199,3.344,251,3.414,375,4.979,645,3.747,654,4.723,739,2.519,740,3.792,741,4.473,742,4.473,743,5.571,744,4.473,745,4.473,746,4.473,747,4.473,748,4.473,749,4.473,750,5.571,751,4.473,752,4.473,753,4.473]],["title/miscellaneous/functions.html",[739,1.624,754,3.516]],["body/miscellaneous/functions.html",[6,0.412,8,0.282,16,0.367,17,0.022,46,0.021,47,0.021,61,1.09,62,0.953,63,1.09,355,3.69,369,5.372,384,4.185,540,4.423,695,3.69,696,5.372,739,2.78,754,4.185,755,4.185,756,4.937,757,4.937]],["title/index.html",[8,0.165,758,2.884,759,2.884]],["body/index.html",[4,0.247,17,0.024,46,0.017,47,0.017,77,1.819,343,3.193,690,2.815,760,3.766,761,3.766,762,4.988,763,3.766,764,3.766,765,3.766,766,3.766,767,3.766,768,3.193,769,5.592,770,3.766,771,3.766,772,3.766,773,6.492,774,3.766,775,3.766,776,3.766,777,6.364,778,3.766,779,3.766,780,4.988,781,3.766,782,3.766,783,3.766,784,3.766,785,4.988,786,4.988,787,3.766,788,3.766,789,3.766,790,4.988,791,4.988,792,3.766,793,3.766,794,3.766,795,3.766,796,3.766,797,3.193,798,3.766,799,3.766,800,3.766,801,3.766,802,3.766,803,3.766,804,3.766,805,3.766,806,3.766,807,3.766,808,3.193,809,3.766,810,3.766,811,3.766,812,3.766,813,3.766,814,3.766,815,3.193]],["title/modules.html",[164,2.882]],["body/modules.html",[17,0.021,46,0.021,47,0.021,163,3.51,164,3.198,169,3.198,797,5.184,816,6.115,817,6.115,818,6.115]],["title/overview.html",[819,3.986]],["body/overview.html",[2,0.996,17,0.023,46,0.02,47,0.02,49,0.932,148,3.371,154,2.347,158,3.429,163,4.489,164,2.764,165,3.431,166,3.823,167,3.823,168,3.823,169,4.013,170,4.186,171,3.371,172,3.371,207,3.371,279,3.371,306,2.764,354,3.732,547,3.823,548,3.823,819,3.823,820,5.599,821,5.599]],["title/properties.html",[9,0.598,711,2.445]],["body/properties.html",[9,0.753,17,0.024,46,0.021,47,0.021,768,4.425,808,4.425,815,4.425,822,5.219,823,5.219,824,5.219]],["title/miscellaneous/variables.html",[739,1.624,825,3.516]],["body/miscellaneous/variables.html",[6,0.474,8,0.222,14,0.983,16,0.423,17,0.025,18,1.182,27,1.749,46,0.018,47,0.018,68,2.614,72,1.758,107,1.182,111,2.139,133,1.259,193,3.806,219,2.614,290,3.294,295,2.905,313,3.294,335,3.294,375,4.677,414,5.304,440,3.425,470,2.614,500,2.614,553,3.806,554,3.806,603,4.317,610,2.614,631,2.614,695,2.905,701,3.294,707,3.294,708,3.294,739,2.188,755,4.317,825,3.294,826,5.092,827,3.886,828,3.886,829,3.886,830,3.886,831,3.886,832,3.886]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":303,"title":{},"body":{"guards/AuthGuard.html":{},"entities/Question.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"coverage.html":{}}}],["0.0.1",{"_index":823,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["0.10.3",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":306,"title":{},"body":{"guards/AuthGuard.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{},"overview.html":{}}}],["10",{"_index":605,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{}}}],["12345test",{"_index":495,"title":{},"body":{"classes/SignInDto.html":{}}}],["1234testyu",{"_index":543,"title":{},"body":{"classes/SignUpDto.html":{}}}],["2",{"_index":820,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":148,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/ViewQuestionsQueryDto.html":{},"overview.html":{}}}],["256",{"_index":575,"title":{},"body":{"entities/User.html":{}}}],["3.0.2",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":821,"title":{},"body":{"overview.html":{}}}],["4.1.9",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["6.0.1",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["6.1.4",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":563,"title":{},"body":{"modules/StackApiModule.html":{}}}],["7.2.0",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":535,"title":{},"body":{"classes/SignUpDto.html":{}}}],["8.8.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["8080",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.0",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["aboutme",{"_index":509,"title":{},"body":{"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{}}}],["address",{"_index":528,"title":{},"body":{"classes/SignUpDto.html":{}}}],["already",{"_index":381,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["amazing",{"_index":798,"title":{},"body":{"index.html":{}}}],["amazinguser12",{"_index":541,"title":{},"body":{"classes/SignUpDto.html":{}}}],["amazinguser@gmail.com",{"_index":542,"title":{},"body":{"classes/SignUpDto.html":{}}}],["amqp",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["answer",{"_index":1,"title":{"entities/Answer.html":{}},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"coverage.html":{}}}],["answer.entity",{"_index":412,"title":{},"body":{"entities/Question.html":{},"entities/User.html":{}}}],["answer.question",{"_index":396,"title":{},"body":{"entities/Question.html":{}}}],["answer.user",{"_index":578,"title":{},"body":{"entities/User.html":{}}}],["answerbody",{"_index":10,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComandHandler.html":{}}}],["answered",{"_index":142,"title":{},"body":{"classes/AnswerQuestionDto.html":{}}}],["answernotification",{"_index":79,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["answerobject",{"_index":123,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["answerquestion",{"_index":417,"title":{},"body":{"controllers/QuestionController.html":{}}}],["answerquestion(body",{"_index":420,"title":{},"body":{"controllers/QuestionController.html":{}}}],["answerquestioncomand",{"_index":48,"title":{"classes/AnswerQuestionComand.html":{}},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["answerquestioncomand(body",{"_index":464,"title":{},"body":{"controllers/QuestionController.html":{}}}],["answerquestioncomand.name",{"_index":463,"title":{},"body":{"controllers/QuestionController.html":{}}}],["answerquestioncomandhandler",{"_index":68,"title":{"classes/AnswerQuestionComandHandler.html":{}},"body":{"classes/AnswerQuestionComandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["answerquestioncomandhandler.name",{"_index":110,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["answerquestiondto",{"_index":59,"title":{"classes/AnswerQuestionDto.html":{}},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionDto.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["answerrepository",{"_index":82,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["api.module",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["api.module.ts",{"_index":549,"title":{},"body":{"modules/StackApiModule.html":{}}}],["api/commands/answer",{"_index":50,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"coverage.html":{}}}],["api/commands/ask",{"_index":213,"title":{},"body":{"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"coverage.html":{}}}],["api/commands/index.ts",{"_index":701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/commands/sign",{"_index":465,"title":{},"body":{"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"coverage.html":{}}}],["api/commands/vote/command.ts",{"_index":627,"title":{},"body":{"classes/VoteCommand.html":{},"coverage.html":{}}}],["api/commands/vote/command.ts:5",{"_index":629,"title":{},"body":{"classes/VoteCommand.html":{}}}],["api/commands/vote/command.ts:6",{"_index":630,"title":{},"body":{"classes/VoteCommand.html":{}}}],["api/commands/vote/handler.ts",{"_index":632,"title":{},"body":{"classes/VoteCommandHandler.html":{},"coverage.html":{}}}],["api/commands/vote/handler.ts:12",{"_index":635,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["api/commands/vote/handler.ts:22",{"_index":637,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["api/commands/vote/handler.ts:99",{"_index":640,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["api/controllers/auth/auth.controller.ts",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["api/controllers/auth/auth.controller.ts:24",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/controllers/auth/auth.controller.ts:34",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/controllers/question/question.controller.ts",{"_index":416,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["api/controllers/question/question.controller.ts:44",{"_index":430,"title":{},"body":{"controllers/QuestionController.html":{}}}],["api/controllers/question/question.controller.ts:55",{"_index":425,"title":{},"body":{"controllers/QuestionController.html":{}}}],["api/controllers/question/question.controller.ts:66",{"_index":422,"title":{},"body":{"controllers/QuestionController.html":{}}}],["api/controllers/vote/vote.controller.ts",{"_index":665,"title":{},"body":{"controllers/VoteController.html":{},"coverage.html":{}}}],["api/controllers/vote/vote.controller.ts:30",{"_index":669,"title":{},"body":{"controllers/VoteController.html":{}}}],["api/dto/answer",{"_index":135,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"coverage.html":{}}}],["api/dto/ask",{"_index":230,"title":{},"body":{"classes/AskQuestionDto.html":{},"coverage.html":{}}}],["api/dto/sign",{"_index":486,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["api/dto/view",{"_index":597,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{},"coverage.html":{}}}],["api/dto/vote.dto.ts",{"_index":676,"title":{},"body":{"classes/VoteDto.html":{},"coverage.html":{}}}],["api/dto/vote.dto.ts:12",{"_index":679,"title":{},"body":{"classes/VoteDto.html":{}}}],["api/dto/vote.dto.ts:20",{"_index":677,"title":{},"body":{"classes/VoteDto.html":{}}}],["api/entities/answer.entity.ts",{"_index":7,"title":{},"body":{"entities/Answer.html":{},"coverage.html":{}}}],["api/entities/answer.entity.ts:14",{"_index":29,"title":{},"body":{"entities/Answer.html":{}}}],["api/entities/answer.entity.ts:17",{"_index":37,"title":{},"body":{"entities/Answer.html":{}}}],["api/entities/answer.entity.ts:22",{"_index":36,"title":{},"body":{"entities/Answer.html":{}}}],["api/entities/answer.entity.ts:25",{"_index":32,"title":{},"body":{"entities/Answer.html":{}}}],["api/entities/answer.entity.ts:28",{"_index":22,"title":{},"body":{"entities/Answer.html":{}}}],["api/entities/answer.entity.ts:31",{"_index":26,"title":{},"body":{"entities/Answer.html":{}}}],["api/entities/questions.entity.ts",{"_index":391,"title":{},"body":{"entities/Question.html":{},"coverage.html":{}}}],["api/entities/questions.entity.ts:16",{"_index":399,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:19",{"_index":405,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:24",{"_index":406,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:27",{"_index":407,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:30",{"_index":400,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:33",{"_index":404,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:36",{"_index":402,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:39",{"_index":398,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:42",{"_index":397,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/questions.entity.ts:45",{"_index":410,"title":{},"body":{"entities/Question.html":{}}}],["api/entities/user.entity.ts",{"_index":573,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["api/entities/user.entity.ts:15",{"_index":585,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:18",{"_index":582,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:21",{"_index":583,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:24",{"_index":584,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:27",{"_index":577,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:30",{"_index":587,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:33",{"_index":579,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:36",{"_index":589,"title":{},"body":{"entities/User.html":{}}}],["api/entities/user.entity.ts:39",{"_index":580,"title":{},"body":{"entities/User.html":{}}}],["api/entities/votes.entity.ts",{"_index":684,"title":{},"body":{"entities/Votes.html":{},"coverage.html":{}}}],["api/entities/votes.entity.ts:14",{"_index":686,"title":{},"body":{"entities/Votes.html":{}}}],["api/entities/votes.entity.ts:17",{"_index":688,"title":{},"body":{"entities/Votes.html":{}}}],["api/entities/votes.entity.ts:20",{"_index":687,"title":{},"body":{"entities/Votes.html":{}}}],["api/entities/votes.entity.ts:23",{"_index":689,"title":{},"body":{"entities/Votes.html":{}}}],["api/entities/votes.entity.ts:26",{"_index":685,"title":{},"body":{"entities/Votes.html":{}}}],["api/guards/auth",{"_index":282,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["api/queries/index.ts",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/queries/view",{"_index":591,"title":{},"body":{"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"coverage.html":{}}}],["api/shared/constants/errormessages.enum.ts",{"_index":744,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["api/shared/constants/vote",{"_index":753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["api/shared/decorators/isvalueexists.ts",{"_index":355,"title":{},"body":{"injectables/IsValueExistConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["api/shared/decorators/isvalueexists.ts:14",{"_index":360,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["api/shared/decorators/isvalueexists.ts:16",{"_index":366,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["api/shared/decorators/isvalueexists.ts:28",{"_index":363,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["api/shared/decorators/user.decorator.ts",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/stack",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{}}}],["apibearerauth",{"_index":441,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["apibody",{"_index":442,"title":{},"body":{"controllers/QuestionController.html":{}}}],["apitags",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["apitags('auth",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('question",{"_index":447,"title":{},"body":{"controllers/QuestionController.html":{}}}],["apitags('vote",{"_index":670,"title":{},"body":{"controllers/VoteController.html":{}}}],["app",{"_index":775,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":153,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":767,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":163,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":158,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":364,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["args.property",{"_index":374,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["args.value",{"_index":376,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["argumentshost",{"_index":331,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ask",{"_index":459,"title":{},"body":{"controllers/QuestionController.html":{}}}],["askquestion",{"_index":418,"title":{},"body":{"controllers/QuestionController.html":{}}}],["askquestion(@body",{"_index":458,"title":{},"body":{"controllers/QuestionController.html":{}}}],["askquestion(body",{"_index":423,"title":{},"body":{"controllers/QuestionController.html":{}}}],["askquestioncommand",{"_index":212,"title":{"classes/AskQuestionCommand.html":{}},"body":{"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["askquestioncommand(body",{"_index":461,"title":{},"body":{"controllers/QuestionController.html":{}}}],["askquestioncommand.name",{"_index":460,"title":{},"body":{"controllers/QuestionController.html":{}}}],["askquestioncommandhandler",{"_index":219,"title":{"classes/AskQuestionCommandHandler.html":{}},"body":{"classes/AskQuestionCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["askquestioncommandhandler.name",{"_index":225,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{}}}],["askquestiondto",{"_index":215,"title":{"classes/AskQuestionDto.html":{}},"body":{"classes/AskQuestionCommand.html":{},"classes/AskQuestionDto.html":{},"controllers/QuestionController.html":{},"coverage.html":{}}}],["async",{"_index":74,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["auth",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["authcontroller",{"_index":238,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/StackApiModule.html":{},"coverage.html":{}}}],["authguard",{"_index":280,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["author",{"_index":808,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":298,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authorization.split",{"_index":302,"title":{},"body":{"guards/AuthGuard.html":{}}}],["autoloadentities",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":115,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["backers",{"_index":799,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":474,"title":{},"body":{"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{}}}],["bcrypt.compare(password",{"_index":483,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["bcrypt.gensalt(10",{"_index":511,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["bcrypt.hash(password",{"_index":512,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["bcryptjs",{"_index":475,"title":{},"body":{"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"dependencies.html":{}}}],["bearer",{"_index":304,"title":{},"body":{"guards/AuthGuard.html":{}}}],["being",{"_index":141,"title":{},"body":{"classes/AnswerQuestionDto.html":{}}}],["blah",{"_index":237,"title":{},"body":{"classes/AskQuestionDto.html":{}}}],["body",{"_index":56,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["boolean",{"_index":403,"title":{},"body":{"entities/Question.html":{}}}],["bootstrap",{"_index":696,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":818,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":816,"title":{},"body":{"modules.html":{}}}],["building",{"_index":763,"title":{},"body":{"index.html":{}}}],["calling",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["canactivate",{"_index":284,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":289,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":117,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/HttpErrorFilter.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["catch(exception",{"_index":330,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["class",{"_index":45,"title":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{}},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":49,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":435,"title":{},"body":{"controllers/QuestionController.html":{}}}],["clientproxy",{"_index":80,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["clientsmodule",{"_index":555,"title":{},"body":{"modules/StackApiModule.html":{}}}],["clientsmodule.register",{"_index":565,"title":{},"body":{"modules/StackApiModule.html":{}}}],["cluster_appmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_stackapimodule",{"_index":547,"title":{},"body":{"modules/StackApiModule.html":{},"overview.html":{}}}],["cluster_stackapimodule_providers",{"_index":548,"title":{},"body":{"modules/StackApiModule.html":{},"overview.html":{}}}],["column",{"_index":20,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{}}}],["column({default",{"_index":401,"title":{},"body":{"entities/Question.html":{}}}],["column({length",{"_index":574,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["comand",{"_index":89,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["combination",{"_index":531,"title":{},"body":{"classes/SignUpDto.html":{}}}],["command",{"_index":85,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["commandbus",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["commandbus.execute",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["commandhandler",{"_index":88,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["commandhandler(answerquestioncomand",{"_index":102,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["commandhandler(askquestioncommand",{"_index":223,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{}}}],["commandhandler(signincommand",{"_index":476,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["commandhandler(signupcommand",{"_index":505,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["commandhandler(votecommand",{"_index":641,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["commandhandlers",{"_index":553,"title":{},"body":{"modules/StackApiModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commands",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"modules/StackApiModule.html":{},"controllers/VoteController.html":{}}}],["configmodule",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":287,"title":{},"body":{"guards/AuthGuard.html":{},"modules/StackApiModule.html":{}}}],["configservice().get('secret_key",{"_index":560,"title":{},"body":{"modules/StackApiModule.html":{}}}],["configservice().get('url",{"_index":569,"title":{},"body":{"modules/StackApiModule.html":{}}}],["connection",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["console.log(error",{"_index":312,"title":{},"body":{"guards/AuthGuard.html":{}}}],["const",{"_index":111,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":390,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["constructor",{"_index":57,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{}}}],["constructor(@injectentitymanager",{"_index":372,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["constructor(answerrepository",{"_index":76,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["constructor(body",{"_index":58,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AskQuestionCommand.html":{},"classes/SignInCommand.html":{},"classes/SignUpCommand.html":{},"classes/VoteCommand.html":{}}}],["constructor(entitymanager",{"_index":358,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["constructor(error",{"_index":318,"title":{},"body":{"classes/DatabaseException.html":{}}}],["constructor(jwtservice",{"_index":285,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(param",{"_index":594,"title":{},"body":{"classes/ViewQuestionsQuery.html":{}}}],["constructor(private",{"_index":160,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/VoteController.html":{}}}],["constructor(public",{"_index":469,"title":{},"body":{"classes/SignInCommand.html":{},"classes/SignUpCommand.html":{},"classes/ViewQuestionsQuery.html":{},"classes/VoteCommand.html":{}}}],["constructor(repository",{"_index":220,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{}}}],["constructor(votesrepository",{"_index":634,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["context",{"_index":292,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":296,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":152,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('question",{"_index":448,"title":{},"body":{"controllers/QuestionController.html":{}}}],["controller('vote",{"_index":671,"title":{},"body":{"controllers/VoteController.html":{}}}],["controllers",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"modules/StackApiModule.html":{},"controllers/VoteController.html":{},"overview.html":{}}}],["coverage",{"_index":690,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrsmodule",{"_index":551,"title":{},"body":{"modules/StackApiModule.html":{}}}],["createdatecolumn",{"_index":39,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{}}}],["createdatecolumn({type",{"_index":24,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{}}}],["createparamdecorator",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creationdate",{"_index":11,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"classes/ViewQuestionsQueryHandler.html":{},"entities/Votes.html":{}}}],["credentials",{"_index":751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ctx",{"_index":335,"title":{},"body":{"classes/HttpErrorFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":337,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.getresponse",{"_index":338,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":603,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseException.html":{},"miscellaneous/enumerations.html":{}}}],["database_error",{"_index":748,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["databaseexception",{"_index":99,"title":{"classes/DatabaseException.html":{}},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/DatabaseException.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"coverage.html":{}}}],["databaseexception(error",{"_index":120,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["date",{"_index":23,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{}}}],["date().toisostring",{"_index":351,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["days",{"_index":564,"title":{},"body":{"modules/StackApiModule.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"classes/ViewQuestionsQueryDto.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{}}}],["deeper",{"_index":231,"title":{},"body":{"classes/AskQuestionDto.html":{}}}],["default",{"_index":414,"title":{},"body":{"entities/Question.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":356,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["defaultmessage(args",{"_index":361,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["defined",{"_index":21,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{}}}],["dependencies",{"_index":165,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":624,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["description",{"_index":768,"title":{},"body":{"index.html":{},"properties.html":{}}}],["developer",{"_index":546,"title":{},"body":{"classes/SignUpDto.html":{}}}],["development",{"_index":776,"title":{},"body":{"index.html":{}}}],["display",{"_index":525,"title":{},"body":{"classes/SignUpDto.html":{}}}],["displayname",{"_index":508,"title":{},"body":{"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{}}}],["documentation",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["doing",{"_index":236,"title":{},"body":{"classes/AskQuestionDto.html":{}}}],["down",{"_index":654,"title":{},"body":{"classes/VoteCommandHandler.html":{},"miscellaneous/enumerations.html":{}}}],["down(downvote",{"_index":681,"title":{},"body":{"classes/VoteDto.html":{}}}],["downvote",{"_index":656,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["dto",{"_index":67,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AskQuestionCommand.html":{},"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignUpCommand.html":{},"classes/ViewQuestionsQuery.html":{},"classes/VoteCommand.html":{},"controllers/VoteController.html":{}}}],["durable",{"_index":572,"title":{},"body":{"modules/StackApiModule.html":{}}}],["e2e",{"_index":787,"title":{},"body":{"index.html":{}}}],["eager",{"_index":34,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{}}}],["efficient",{"_index":764,"title":{},"body":{"index.html":{}}}],["element",{"_index":380,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["email",{"_index":310,"title":{},"body":{"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{}}}],["encrypt",{"_index":747,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["encryption_error",{"_index":745,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"entities/Votes.html":{},"overview.html":{}}}],["entity",{"_index":0,"title":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{}},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{},"coverage.html":{}}}],["entitymanager",{"_index":359,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["enumerations",{"_index":740,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":118,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["errormessage",{"_index":340,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errormessages",{"_index":96,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommandHandler.html":{},"miscellaneous/enumerations.html":{}}}],["errormessages.encryption_error",{"_index":514,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["errormessages.invalid_question",{"_index":121,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["errormessages.invalid_user",{"_index":480,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["errorresponseformat",{"_index":344,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["event",{"_index":128,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["example",{"_index":147,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/VoteDto.html":{}}}],["exception",{"_index":101,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/HttpErrorFilter.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["exception.getstatus",{"_index":339,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.message",{"_index":341,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.ts",{"_index":316,"title":{},"body":{"classes/DatabaseException.html":{},"coverage.html":{}}}],["exception.ts:4",{"_index":319,"title":{},"body":{"classes/DatabaseException.html":{}}}],["exceptionfilter",{"_index":328,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["excludeprefixes",{"_index":445,"title":{},"body":{"controllers/QuestionController.html":{}}}],["execute",{"_index":75,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["execute(command",{"_index":83,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["execute(query",{"_index":614,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["executioncontext",{"_index":290,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":382,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["expiresin",{"_index":562,"title":{},"body":{"modules/StackApiModule.html":{}}}],["explanation",{"_index":232,"title":{},"body":{"classes/AskQuestionDto.html":{}}}],["export",{"_index":44,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{}}}],["express",{"_index":334,"title":{},"body":{"classes/HttpErrorFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":317,"title":{},"body":{"classes/DatabaseException.html":{}}}],["false",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsValueExistConstraint.html":{}}}],["fetching",{"_index":625,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["field",{"_index":373,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{}}}],["filter.ts",{"_index":327,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["filter.ts:13",{"_index":329,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["filter.ts:17",{"_index":332,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["findoneby(user",{"_index":378,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["framework",{"_index":762,"title":{},"body":{"index.html":{}}}],["function",{"_index":383,"title":{},"body":{"injectables/IsValueExistConstraint.html":{},"coverage.html":{}}}],["functions",{"_index":754,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/view",{"_index":450,"title":{},"body":{"controllers/QuestionController.html":{}}}],["gethello",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":758,"title":{"index.html":{}},"body":{}}],["git",{"_index":233,"title":{},"body":{"classes/AskQuestionDto.html":{}}}],["grow",{"_index":794,"title":{},"body":{"index.html":{}}}],["guard",{"_index":279,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard.ts",{"_index":283,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["guard.ts:15",{"_index":288,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guard.ts:21",{"_index":291,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guards",{"_index":281,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["hashed",{"_index":446,"title":{},"body":{"controllers/QuestionController.html":{}}}],["hashedpassword",{"_index":481,"title":{},"body":{"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"entities/User.html":{}}}],["headers",{"_index":297,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hello",{"_index":210,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":805,"title":{},"body":{"index.html":{}}}],["host",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{}}}],["host.switchtohttp",{"_index":336,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["httpcode",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["httpcode(httpstatus.ok",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["httpcode(httpstatus.ok)@apibearerauth()@post('/answer",{"_index":421,"title":{},"body":{"controllers/QuestionController.html":{}}}],["httpcode(httpstatus.ok)@apibearerauth()@post('/ask",{"_index":424,"title":{},"body":{"controllers/QuestionController.html":{}}}],["httpcode(httpstatus.ok)@get('/view",{"_index":428,"title":{},"body":{"controllers/QuestionController.html":{}}}],["httpcode(httpstatus.ok)@post",{"_index":668,"title":{},"body":{"controllers/VoteController.html":{}}}],["httpcode(httpstatus.ok)@post('/sign",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["httperrorfilter",{"_index":185,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":90,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["httpexception('invalid",{"_index":305,"title":{},"body":{"guards/AuthGuard.html":{}}}],["httpexception('no",{"_index":299,"title":{},"body":{"guards/AuthGuard.html":{}}}],["https://nestjs.com",{"_index":812,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":91,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["httpstatus.bad_request",{"_index":122,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["httpstatus.internal_server_error",{"_index":322,"title":{},"body":{"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"classes/SignUpCommandHandler.html":{}}}],["httpstatus.unauthorized",{"_index":301,"title":{},"body":{"guards/AuthGuard.html":{}}}],["icommand",{"_index":53,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AskQuestionCommand.html":{},"classes/SignInCommand.html":{},"classes/SignUpCommand.html":{},"classes/VoteCommand.html":{}}}],["icommandhandler",{"_index":70,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["id",{"_index":12,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"entities/Question.html":{},"entities/User.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"miscellaneous/enumerations.html":{}}}],["identifier",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":52,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{}}}],["import",{"_index":38,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{}}}],["imports",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{}}}],["in.dto.ts",{"_index":487,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:11",{"_index":489,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:19",{"_index":492,"title":{},"body":{"classes/SignInDto.html":{}}}],["in/command.ts",{"_index":466,"title":{},"body":{"classes/SignInCommand.html":{},"coverage.html":{}}}],["in/command.ts:4",{"_index":467,"title":{},"body":{"classes/SignInCommand.html":{}}}],["in/command.ts:5",{"_index":468,"title":{},"body":{"classes/SignInCommand.html":{}}}],["in/handler.ts",{"_index":471,"title":{},"body":{"classes/SignInCommandHandler.html":{},"coverage.html":{}}}],["in/handler.ts:14",{"_index":472,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["in/handler.ts:22",{"_index":473,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{}}}],["inject",{"_index":92,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["inject('notification",{"_index":105,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["injectable",{"_index":206,"title":{"injectables/AppService.html":{},"injectables/IsValueExistConstraint.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"coverage.html":{}}}],["injectables",{"_index":207,"title":{},"body":{"injectables/AppService.html":{},"injectables/IsValueExistConstraint.html":{},"overview.html":{}}}],["injectentitymanager",{"_index":367,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["injectrepository",{"_index":94,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["injectrepository(answer",{"_index":103,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["injectrepository(question",{"_index":104,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["injectrepository(user",{"_index":294,"title":{},"body":{"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{}}}],["injectrepository(votes",{"_index":642,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["installation",{"_index":772,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":774,"title":{},"body":{"index.html":{}}}],["instance",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["internal",{"_index":342,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["invalid",{"_index":750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invalid_question",{"_index":752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invalid_user",{"_index":749,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["iquery",{"_index":593,"title":{},"body":{"classes/ViewQuestionsQuery.html":{}}}],["iqueryhandler",{"_index":612,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["isalphanumeric",{"_index":536,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isdefined",{"_index":539,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isemail",{"_index":493,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["isenum",{"_index":682,"title":{},"body":{"classes/VoteDto.html":{}}}],["isenum(votetype",{"_index":683,"title":{},"body":{"classes/VoteDto.html":{}}}],["isglobal",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":609,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{}}}],["isint()@isoptional()@type(undefined",{"_index":601,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{}}}],["isnotempty",{"_index":143,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/VoteDto.html":{}}}],["isnotempty()@isstring()@isalphanumeric()@length(8",{"_index":529,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isnumber",{"_index":144,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/VoteDto.html":{}}}],["isnumber()@isnotempty",{"_index":139,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/VoteDto.html":{}}}],["isoptional",{"_index":538,"title":{},"body":{"classes/SignUpDto.html":{},"classes/ViewQuestionsQueryDto.html":{}}}],["ispasswordvalid",{"_index":482,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["isstring",{"_index":145,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/VoteDto.html":{}}}],["isstring()@isemail()@isnotempty",{"_index":488,"title":{},"body":{"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":137,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@isdefined()@isvalueexists",{"_index":523,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isstring()@isnotempty()@isemail()@isvalueexists",{"_index":526,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isstring()@isnotempty()@isenum(votetype",{"_index":678,"title":{},"body":{"classes/VoteDto.html":{}}}],["isstring()@isoptional",{"_index":520,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isuserexists",{"_index":479,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["isuserexists.email",{"_index":485,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["isvalueexistconstraint",{"_index":354,"title":{"injectables/IsValueExistConstraint.html":{}},"body":{"injectables/IsValueExistConstraint.html":{},"modules/StackApiModule.html":{},"coverage.html":{},"overview.html":{}}}],["isvalueexists",{"_index":540,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalueexists(validationoptions",{"_index":384,"title":{},"body":{"injectables/IsValueExistConstraint.html":{},"miscellaneous/functions.html":{}}}],["isvoteexists",{"_index":646,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["isvoteexists.votetype",{"_index":649,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["join",{"_index":801,"title":{},"body":{"index.html":{}}}],["json.stringify(errorresponseformat",{"_index":352,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["jwtmodule",{"_index":552,"title":{},"body":{"modules/StackApiModule.html":{}}}],["jwtmodule.register",{"_index":559,"title":{},"body":{"modules/StackApiModule.html":{}}}],["jwtservice",{"_index":286,"title":{},"body":{"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{}}}],["kamil",{"_index":809,"title":{},"body":{"index.html":{}}}],["length",{"_index":537,"title":{},"body":{"classes/SignUpDto.html":{},"entities/User.html":{}}}],["length(8",{"_index":544,"title":{},"body":{"classes/SignUpDto.html":{}}}],["less",{"_index":534,"title":{},"body":{"classes/SignUpDto.html":{}}}],["letters",{"_index":532,"title":{},"body":{"classes/SignUpDto.html":{}}}],["license",{"_index":815,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":791,"title":{},"body":{"index.html":{}}}],["limit",{"_index":599,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{}}}],["logger",{"_index":72,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('main",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger(answerquestioncomand.name",{"_index":108,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["logger(askquestioncommandhandler.name",{"_index":224,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{}}}],["logger(authcontroller.name",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["logger(databaseexception.name",{"_index":324,"title":{},"body":{"classes/DatabaseException.html":{}}}],["logger(questioncontroller.name",{"_index":449,"title":{},"body":{"controllers/QuestionController.html":{}}}],["logger(signincommandhandler.name",{"_index":477,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["logger(signupcommandhandler.name",{"_index":506,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["logger(viewquestionsqueryhandler.name",{"_index":618,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["logger(votecommandhandler.name",{"_index":643,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["logger(votecontroller.name",{"_index":672,"title":{},"body":{"controllers/VoteController.html":{}}}],["long",{"_index":150,"title":{},"body":{"classes/AnswerQuestionDto.html":{}}}],["manager",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["manytoone",{"_index":40,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/Votes.html":{}}}],["manytoone(undefined",{"_index":30,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/Votes.html":{}}}],["matching",{"_index":47,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":323,"title":{},"body":{"classes/DatabaseException.html":{}}}],["metadata",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":346,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/VoteCommandHandler.html":{}}}],["methods",{"_index":73,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["miscellaneous",{"_index":739,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":790,"title":{},"body":{"index.html":{}}}],["mode",{"_index":780,"title":{},"body":{"index.html":{}}}],["module",{"_index":162,"title":{"modules/AppModule.html":{},"modules/StackApiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{}}}],["modules",{"_index":164,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":804,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":810,"title":{},"body":{"index.html":{}}}],["name",{"_index":62,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":769,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":814,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":93,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"modules/StackApiModule.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/StackApiModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":66,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"modules/StackApiModule.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":293,"title":{},"body":{"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"modules/StackApiModule.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":557,"title":{},"body":{"modules/StackApiModule.html":{},"dependencies.html":{}}}],["nestjs/microservices/client",{"_index":98,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["nestjs/platform",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":95,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"modules/AppModule.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"modules/StackApiModule.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"dependencies.html":{}}}],["new",{"_index":107,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"modules/StackApiModule.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":516,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["newuser.email",{"_index":518,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["node.js",{"_index":761,"title":{},"body":{"index.html":{}}}],["notification",{"_index":566,"title":{},"body":{"modules/StackApiModule.html":{}}}],["npm",{"_index":773,"title":{},"body":{"index.html":{}}}],["null",{"_index":113,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["nullable",{"_index":576,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":27,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionDto.html":{},"entities/Question.html":{},"entities/User.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"miscellaneous/variables.html":{}}}],["numbers.must",{"_index":533,"title":{},"body":{"classes/SignUpDto.html":{}}}],["object",{"_index":385,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["object.constructor",{"_index":388,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["offset",{"_index":600,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{}}}],["onetomany",{"_index":411,"title":{},"body":{"entities/Question.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":395,"title":{},"body":{"entities/Question.html":{},"entities/User.html":{}}}],["open",{"_index":792,"title":{},"body":{"index.html":{}}}],["optional",{"_index":63,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":389,"title":{},"body":{"injectables/IsValueExistConstraint.html":{},"modules/StackApiModule.html":{}}}],["order",{"_index":623,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["out",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{},"overview.html":{}}}],["overview",{"_index":819,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":711,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":431,"title":{},"body":{"controllers/QuestionController.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{}}}],["parameters",{"_index":61,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"miscellaneous/functions.html":{}}}],["password",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"miscellaneous/enumerations.html":{}}}],["pg",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["place",{"_index":650,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["please",{"_index":802,"title":{},"body":{"index.html":{}}}],["port",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["post('/answer",{"_index":462,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post('/ask",{"_index":457,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post('/sign",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["primarygeneratedcolumn",{"_index":28,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{}}}],["private",{"_index":71,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["process.env.database_host",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_name",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_password",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_username",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":782,"title":{},"body":{"index.html":{}}}],["profile",{"_index":522,"title":{},"body":{"classes/SignUpDto.html":{}}}],["progressive",{"_index":760,"title":{},"body":{"index.html":{}}}],["project",{"_index":793,"title":{},"body":{"index.html":{}}}],["promise",{"_index":87,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"entities/Question.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"properties.html":{}}}],["propertyname",{"_index":386,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["provide",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{}}}],["public",{"_index":54,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AskQuestionCommand.html":{},"classes/SignInCommand.html":{},"classes/SignUpCommand.html":{},"classes/ViewQuestionsQuery.html":{},"classes/VoteCommand.html":{},"controllers/VoteController.html":{}}}],["queries",{"_index":439,"title":{},"body":{"controllers/QuestionController.html":{},"modules/StackApiModule.html":{}}}],["query",{"_index":433,"title":{},"body":{"controllers/QuestionController.html":{},"classes/ViewQuestionsQueryHandler.html":{}}}],["querybus",{"_index":437,"title":{},"body":{"controllers/QuestionController.html":{}}}],["querybus.execute",{"_index":453,"title":{},"body":{"controllers/QuestionController.html":{}}}],["queryhandler",{"_index":616,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["queryhandler(viewquestionsquery",{"_index":617,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["queryhandlers",{"_index":554,"title":{},"body":{"modules/StackApiModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question",{"_index":13,"title":{"entities/Question.html":{}},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["question.dto.ts",{"_index":136,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:10",{"_index":140,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{}}}],["question.dto.ts:18",{"_index":138,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{}}}],["question.id",{"_index":31,"title":{},"body":{"entities/Answer.html":{},"entities/Votes.html":{}}}],["question.score",{"_index":662,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["question.subscribeanswer",{"_index":126,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["question.user",{"_index":586,"title":{},"body":{"entities/User.html":{}}}],["question.user.email",{"_index":130,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["question/comand.ts",{"_index":51,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"coverage.html":{}}}],["question/comand.ts:5",{"_index":60,"title":{},"body":{"classes/AnswerQuestionComand.html":{}}}],["question/comand.ts:7",{"_index":64,"title":{},"body":{"classes/AnswerQuestionComand.html":{}}}],["question/comand.ts:8",{"_index":65,"title":{},"body":{"classes/AnswerQuestionComand.html":{}}}],["question/command.ts",{"_index":214,"title":{},"body":{"classes/AskQuestionCommand.html":{},"coverage.html":{}}}],["question/command.ts:5",{"_index":216,"title":{},"body":{"classes/AskQuestionCommand.html":{}}}],["question/command.ts:7",{"_index":217,"title":{},"body":{"classes/AskQuestionCommand.html":{}}}],["question/command.ts:8",{"_index":218,"title":{},"body":{"classes/AskQuestionCommand.html":{}}}],["question/handler.ts",{"_index":69,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"coverage.html":{}}}],["question/handler.ts:13",{"_index":221,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{}}}],["question/handler.ts:15",{"_index":81,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["question/handler.ts:21",{"_index":222,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{}}}],["question/handler.ts:26",{"_index":84,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["questionbody",{"_index":228,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{},"entities/Question.html":{}}}],["questioncontroller",{"_index":415,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/StackApiModule.html":{},"coverage.html":{}}}],["questionid",{"_index":112,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{}}}],["questionobject",{"_index":227,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{}}}],["questionrepository",{"_index":78,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["questions",{"_index":429,"title":{},"body":{"controllers/QuestionController.html":{},"classes/ViewQuestionsQueryHandler.html":{}}}],["questions.dto.ts",{"_index":598,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{},"coverage.html":{}}}],["questions.dto.ts:12",{"_index":602,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{}}}],["questions.dto.ts:21",{"_index":606,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{}}}],["questions.entity",{"_index":42,"title":{},"body":{"entities/Answer.html":{},"entities/User.html":{},"entities/Votes.html":{}}}],["questions/handler.ts",{"_index":611,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{},"coverage.html":{}}}],["questions/handler.ts:13",{"_index":613,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["questions/handler.ts:20",{"_index":615,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["questions/query.ts",{"_index":592,"title":{},"body":{"classes/ViewQuestionsQuery.html":{},"coverage.html":{}}}],["questions/query.ts:4",{"_index":595,"title":{},"body":{"classes/ViewQuestionsQuery.html":{}}}],["questions/query.ts:5",{"_index":596,"title":{},"body":{"classes/ViewQuestionsQuery.html":{}}}],["queue",{"_index":570,"title":{},"body":{"modules/StackApiModule.html":{}}}],["queueoptions",{"_index":571,"title":{},"body":{"modules/StackApiModule.html":{}}}],["read",{"_index":803,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"controllers/AppController.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQuery.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["reflect",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["registerdecorator",{"_index":368,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["relations",{"_index":648,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["repository",{"_index":77,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"index.html":{}}}],["request",{"_index":295,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpErrorFilter.html":{},"miscellaneous/variables.html":{}}}],["request.method",{"_index":347,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["request.url",{"_index":349,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["request.user",{"_index":313,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{},"overview.html":{}}}],["response",{"_index":333,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["response.status(status).json(errorresponseformat",{"_index":353,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["results",{"_index":46,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":133,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"miscellaneous/variables.html":{}}}],["return.defaults",{"_index":604,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{}}}],["returns",{"_index":86,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["rimraf",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":777,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":510,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["same",{"_index":651,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["saving",{"_index":132,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["scalable",{"_index":765,"title":{},"body":{"index.html":{}}}],["score",{"_index":392,"title":{},"body":{"entities/Question.html":{},"classes/VoteCommandHandler.html":{}}}],["scoreamount",{"_index":639,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["secret",{"_index":308,"title":{},"body":{"guards/AuthGuard.html":{},"modules/StackApiModule.html":{}}}],["serializeoptions",{"_index":436,"title":{},"body":{"controllers/QuestionController.html":{}}}],["server",{"_index":343,"title":{},"body":{"classes/HttpErrorFilter.html":{},"index.html":{}}}],["shared",{"_index":97,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{}}}],["side",{"_index":766,"title":{},"body":{"index.html":{}}}],["sign",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommandHandler.html":{}}}],["signedinuser",{"_index":440,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/VoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signin",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(@body",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(body",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["signincommand",{"_index":256,"title":{"classes/SignInCommand.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"coverage.html":{}}}],["signincommand(body",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["signincommand.name",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["signincommandhandler",{"_index":470,"title":{"classes/SignInCommandHandler.html":{}},"body":{"classes/SignInCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signincommandhandler.name",{"_index":478,"title":{},"body":{"classes/SignInCommandHandler.html":{}}}],["signindto",{"_index":245,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInCommand.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":561,"title":{},"body":{"modules/StackApiModule.html":{}}}],["signup",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupcommand",{"_index":257,"title":{"classes/SignUpCommand.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"coverage.html":{}}}],["signupcommand(body",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupcommand.name",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupcommandhandler",{"_index":500,"title":{"classes/SignUpCommandHandler.html":{}},"body":{"classes/SignUpCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupcommandhandler.name",{"_index":507,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["signupdto",{"_index":250,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignUpCommand.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["signupobject",{"_index":515,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["skip",{"_index":621,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["skip.defaults",{"_index":607,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{}}}],["software",{"_index":545,"title":{},"body":{"classes/SignUpDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"index.html":{}}}],["sponsors",{"_index":796,"title":{},"body":{"index.html":{}}}],["src/.../errormessages.enum.ts",{"_index":741,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isvalueexists.ts",{"_index":756,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":755,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../vote",{"_index":742,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":157,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":208,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":695,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/stack",{"_index":6,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/util/database",{"_index":315,"title":{},"body":{"classes/DatabaseException.html":{},"coverage.html":{}}}],["src/util/http",{"_index":326,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["stack",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["stackapimodule",{"_index":169,"title":{"modules/StackApiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{},"modules.html":{},"overview.html":{}}}],["start",{"_index":778,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":781,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":783,"title":{},"body":{"index.html":{}}}],["started",{"_index":759,"title":{"index.html":{}},"body":{}}],["starter",{"_index":771,"title":{},"body":{"index.html":{}}}],["statements",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":321,"title":{},"body":{"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{}}}],["statuscode",{"_index":345,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["stay",{"_index":806,"title":{},"body":{"index.html":{}}}],["string",{"_index":18,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AskQuestionDto.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"classes/SignInDto.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"miscellaneous/variables.html":{}}}],["subscribeanswer",{"_index":393,"title":{},"body":{"entities/Question.html":{}}}],["successful",{"_index":134,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["summary",{"_index":151,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/SignUpDto.html":{}}}],["super",{"_index":320,"title":{},"body":{"classes/DatabaseException.html":{}}}],["support",{"_index":797,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":817,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":622,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["target",{"_index":387,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["test",{"_index":786,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":789,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":788,"title":{},"body":{"index.html":{}}}],["testemail@gmail.com",{"_index":494,"title":{},"body":{"classes/SignInDto.html":{}}}],["tests",{"_index":785,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":795,"title":{},"body":{"index.html":{}}}],["then((element",{"_index":379,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["this.answernotification.emit('answer",{"_index":129,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["this.answerrepository.save(answerobject",{"_index":125,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["this.appservice.gethello",{"_index":161,"title":{},"body":{"controllers/AppController.html":{}}}],["this.commandbus.execute(new",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["this.configservice.get('secret_key",{"_index":309,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.entitymanager",{"_index":377,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["this.jwtservice.sign",{"_index":484,"title":{},"body":{"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{}}}],["this.jwtservice.verify(token",{"_index":311,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.logger",{"_index":106,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"controllers/AuthController.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["this.logger.log",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpErrorFilter.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["this.logger.log('done",{"_index":131,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["this.logger.log('in",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{}}}],["this.logger.log('publishing",{"_index":127,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{}}}],["this.logger.log(`error",{"_index":513,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["this.logger.log(`in",{"_index":109,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["this.logger.log(error",{"_index":325,"title":{},"body":{"classes/DatabaseException.html":{}}}],["this.querybus.execute(new",{"_index":455,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionrepository.findone",{"_index":116,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["this.questionrepository.update(id",{"_index":663,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["this.repository.find",{"_index":620,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["this.repository.findone",{"_index":314,"title":{},"body":{"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{}}}],["this.repository.save(questionobject",{"_index":229,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{}}}],["this.repository.save(signupobject",{"_index":517,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["this.updatescore(questionid",{"_index":655,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["this.votesrepository.findone",{"_index":647,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["this.votesrepository.save(voteobject",{"_index":659,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["this.votesrepository.update(isvoteexists.id",{"_index":653,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["throw",{"_index":119,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["time",{"_index":350,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["timestamp",{"_index":25,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/User.html":{},"entities/Votes.html":{}}}],["title",{"_index":226,"title":{},"body":{"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"entities/Question.html":{}}}],["token",{"_index":300,"title":{},"body":{"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{}}}],["touch",{"_index":807,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":608,"title":{},"body":{"classes/ViewQuestionsQueryDto.html":{},"dependencies.html":{}}}],["transport",{"_index":556,"title":{},"body":{"modules/StackApiModule.html":{}}}],["transport.rmq",{"_index":567,"title":{},"body":{"modules/StackApiModule.html":{}}}],["tried",{"_index":235,"title":{},"body":{"classes/AskQuestionDto.html":{}}}],["true",{"_index":35,"title":{},"body":{"entities/Answer.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/VoteCommandHandler.html":{}}}],["try",{"_index":114,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["twice",{"_index":652,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["twitter",{"_index":813,"title":{},"body":{"index.html":{}}}],["type",{"_index":16,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AnswerQuestionDto.html":{},"modules/AppModule.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/AskQuestionDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/DatabaseException.html":{},"classes/HttpErrorFilter.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommand.html":{},"classes/SignInCommandHandler.html":{},"classes/SignInDto.html":{},"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type.enum.ts",{"_index":743,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":41,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"entities/User.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{},"entities/Votes.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":558,"title":{},"body":{"modules/StackApiModule.html":{}}}],["typeormmodule.forroot",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":770,"title":{},"body":{"index.html":{}}}],["unable",{"_index":746,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unique",{"_index":590,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":784,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IsValueExistConstraint.html":{},"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["unlicensed",{"_index":824,"title":{},"body":{"properties.html":{}}}],["up",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignInDto.html":{},"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{},"miscellaneous/enumerations.html":{}}}],["up(upvote",{"_index":680,"title":{},"body":{"classes/VoteDto.html":{}}}],["up.command",{"_index":504,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["up.command.ts",{"_index":497,"title":{},"body":{"classes/SignUpCommand.html":{},"coverage.html":{}}}],["up.command.ts:4",{"_index":498,"title":{},"body":{"classes/SignUpCommand.html":{}}}],["up.command.ts:5",{"_index":499,"title":{},"body":{"classes/SignUpCommand.html":{}}}],["up.dto.ts",{"_index":519,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:22",{"_index":524,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:32",{"_index":527,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:42",{"_index":530,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:50",{"_index":521,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.handler.ts",{"_index":501,"title":{},"body":{"classes/SignUpCommandHandler.html":{},"coverage.html":{}}}],["up.handler.ts:14",{"_index":502,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["up.handler.ts:22",{"_index":503,"title":{},"body":{"classes/SignUpCommandHandler.html":{}}}],["up/sign",{"_index":496,"title":{},"body":{"classes/SignUpCommand.html":{},"classes/SignUpCommandHandler.html":{},"coverage.html":{}}}],["update",{"_index":661,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["updatescore",{"_index":633,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["updatescore(id",{"_index":638,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["updating",{"_index":664,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["upvote",{"_index":657,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["url",{"_index":348,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["urls",{"_index":568,"title":{},"body":{"modules/StackApiModule.html":{}}}],["useclass",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":491,"title":{},"body":{"classes/SignInDto.html":{}}}],["useguards",{"_index":432,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["useguards(authguard",{"_index":443,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/VoteController.html":{}}}],["useinterceptors",{"_index":434,"title":{},"body":{"controllers/QuestionController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":444,"title":{},"body":{"controllers/QuestionController.html":{}}}],["user",{"_index":14,"title":{"entities/User.html":{}},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComand.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommand.html":{},"classes/AskQuestionCommandHandler.html":{},"guards/AuthGuard.html":{},"injectables/IsValueExistConstraint.html":{},"entities/Question.html":{},"controllers/QuestionController.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/SignUpDto.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"entities/Votes.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":490,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["user.displayname",{"_index":124,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{}}}],["user.entity",{"_index":43,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"entities/Votes.html":{}}}],["user.id",{"_index":33,"title":{},"body":{"entities/Answer.html":{},"entities/Question.html":{},"classes/VoteCommandHandler.html":{},"entities/Votes.html":{}}}],["user?.[data",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdisplayname",{"_index":15,"title":{},"body":{"entities/Answer.html":{},"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"entities/Question.html":{}}}],["useremail",{"_index":307,"title":{},"body":{"guards/AuthGuard.html":{}}}],["username",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["util",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["util/database",{"_index":100,"title":{},"body":{"classes/AnswerQuestionComandHandler.html":{},"classes/AskQuestionCommandHandler.html":{},"classes/SignInCommandHandler.html":{},"classes/SignUpCommandHandler.html":{},"classes/ViewQuestionsQueryHandler.html":{},"classes/VoteCommandHandler.html":{}}}],["validate",{"_index":357,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["validate(args",{"_index":365,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["validationarguments",{"_index":362,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["validationoptions",{"_index":369,"title":{},"body":{"injectables/IsValueExistConstraint.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":146,"title":{},"body":{"classes/AnswerQuestionDto.html":{},"classes/AskQuestionDto.html":{},"injectables/IsValueExistConstraint.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/ViewQuestionsQueryDto.html":{},"classes/VoteDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":370,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["validatorconstraintinterface",{"_index":371,"title":{},"body":{"injectables/IsValueExistConstraint.html":{}}}],["value",{"_index":375,"title":{},"body":{"injectables/IsValueExistConstraint.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":825,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":822,"title":{},"body":{"properties.html":{}}}],["very",{"_index":149,"title":{},"body":{"classes/AnswerQuestionDto.html":{}}}],["view",{"_index":452,"title":{},"body":{"controllers/QuestionController.html":{}}}],["viewquestions",{"_index":419,"title":{},"body":{"controllers/QuestionController.html":{}}}],["viewquestions(@query",{"_index":451,"title":{},"body":{"controllers/QuestionController.html":{}}}],["viewquestions(param",{"_index":426,"title":{},"body":{"controllers/QuestionController.html":{}}}],["viewquestionsquery",{"_index":438,"title":{"classes/ViewQuestionsQuery.html":{}},"body":{"controllers/QuestionController.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryHandler.html":{},"coverage.html":{}}}],["viewquestionsquery(param",{"_index":456,"title":{},"body":{"controllers/QuestionController.html":{}}}],["viewquestionsquery.name",{"_index":454,"title":{},"body":{"controllers/QuestionController.html":{}}}],["viewquestionsquerydto",{"_index":427,"title":{"classes/ViewQuestionsQueryDto.html":{}},"body":{"controllers/QuestionController.html":{},"classes/ViewQuestionsQuery.html":{},"classes/ViewQuestionsQueryDto.html":{},"coverage.html":{}}}],["viewquestionsqueryhandler",{"_index":610,"title":{"classes/ViewQuestionsQueryHandler.html":{}},"body":{"classes/ViewQuestionsQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["viewquestionsqueryhandler.name",{"_index":619,"title":{},"body":{"classes/ViewQuestionsQueryHandler.html":{}}}],["vote",{"_index":394,"title":{},"body":{"entities/Question.html":{},"entities/User.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{}}}],["votecommand",{"_index":626,"title":{"classes/VoteCommand.html":{}},"body":{"classes/VoteCommand.html":{},"classes/VoteCommandHandler.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["votecommand(body",{"_index":675,"title":{},"body":{"controllers/VoteController.html":{}}}],["votecommand.name",{"_index":674,"title":{},"body":{"controllers/VoteController.html":{}}}],["votecommandhandler",{"_index":631,"title":{"classes/VoteCommandHandler.html":{}},"body":{"classes/VoteCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["votecommandhandler.name",{"_index":644,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["votecontroller",{"_index":550,"title":{"controllers/VoteController.html":{}},"body":{"modules/StackApiModule.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["votedto",{"_index":628,"title":{"classes/VoteDto.html":{}},"body":{"classes/VoteCommand.html":{},"controllers/VoteController.html":{},"classes/VoteDto.html":{},"coverage.html":{}}}],["voteobject",{"_index":658,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["votequestion",{"_index":666,"title":{},"body":{"controllers/VoteController.html":{}}}],["votequestion(@body",{"_index":673,"title":{},"body":{"controllers/VoteController.html":{}}}],["votequestion(body",{"_index":667,"title":{},"body":{"controllers/VoteController.html":{}}}],["votes",{"_index":408,"title":{"entities/Votes.html":{}},"body":{"entities/Question.html":{},"modules/StackApiModule.html":{},"entities/User.html":{},"classes/VoteCommandHandler.html":{},"entities/Votes.html":{},"coverage.html":{}}}],["votes.entity",{"_index":413,"title":{},"body":{"entities/Question.html":{},"entities/User.html":{}}}],["votes.question",{"_index":409,"title":{},"body":{"entities/Question.html":{}}}],["votes.user",{"_index":588,"title":{},"body":{"entities/User.html":{}}}],["votesrepository",{"_index":636,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["votetype",{"_index":645,"title":{},"body":{"classes/VoteCommandHandler.html":{},"classes/VoteDto.html":{},"entities/Votes.html":{},"miscellaneous/enumerations.html":{}}}],["votetype.tolowercase()}vote",{"_index":660,"title":{},"body":{"classes/VoteCommandHandler.html":{}}}],["watch",{"_index":779,"title":{},"body":{"index.html":{}}}],["website",{"_index":811,"title":{},"body":{"index.html":{}}}],["work",{"_index":234,"title":{},"body":{"classes/AskQuestionDto.html":{}}}],["world",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":757,"title":{},"body":{"miscellaneous/functions.html":{}}}],["you'd",{"_index":800,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/StackApiModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Answer.html":{"url":"entities/Answer.html","title":"entity - Answer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/entities/answer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answerBody\n                            \n                            \n                                creationDate\n                            \n                            \n                                id\n                            \n                            \n                                question\n                            \n                            \n                                user\n                            \n                            \n                                userDisplayName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answerBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/answer.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/answer.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/answer.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, question => question.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/answer.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/answer.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDisplayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/answer.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n} from 'typeorm';\nimport { Question } from './questions.entity';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Answer {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  userDisplayName: string;\n\n  @ManyToOne(() => User, (user) => user.id, {\n    eager: true,\n  })\n  user: User;\n\n  @ManyToOne(() => Question, (question) => question.id)\n  question: Question;\n\n  @Column()\n  answerBody: string;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  creationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerQuestionComand.html":{"url":"classes/AnswerQuestionComand.html","title":"class - AnswerQuestionComand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerQuestionComand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/answer-question/comand.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommand\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                body\n                            \n                            \n                                    Public\n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(body: AnswerQuestionDto, user: User)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/answer-question/comand.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        body\n                                                  \n                                                        \n                                                                        AnswerQuestionDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnswerQuestionDto\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/answer-question/comand.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/answer-question/comand.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ICommand } from '@nestjs/cqrs';\nimport { AnswerQuestionDto } from '../../dto';\nimport { User } from '../../entities';\n\nexport class AnswerQuestionComand implements ICommand {\n  constructor(\n    public readonly body: AnswerQuestionDto,\n    public readonly user: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerQuestionComandHandler.html":{"url":"classes/AnswerQuestionComandHandler.html","title":"class - AnswerQuestionComandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerQuestionComandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/answer-question/handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(answerRepository: Repository, questionRepository: Repository, answerNotification: ClientProxy)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/answer-question/handler.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        answerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        answerNotification\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/answer-question/handler.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: AnswerQuestionComand)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/commands/answer-question/handler.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AnswerQuestionComand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { AnswerQuestionComand } from './comand';\nimport { Logger, HttpException, HttpStatus, Inject } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Answer, Question } from '../../entities';\nimport { Repository } from 'typeorm';\nimport { ErrorMessages } from '../../shared';\nimport { ClientProxy } from '@nestjs/microservices/client';\nimport { DatabaseException } from '../../../util/database-exception';\n\n@CommandHandler(AnswerQuestionComand)\nexport class AnswerQuestionComandHandler\n  implements ICommandHandler\n{\n  private logger: Logger;\n  constructor(\n    @InjectRepository(Answer)\n    private answerRepository: Repository,\n    @InjectRepository(Question)\n    private questionRepository: Repository,\n    @Inject('NOTIFICATION') private readonly answerNotification: ClientProxy,\n  ) {\n    this.logger = new Logger(AnswerQuestionComand.name);\n  }\n\n  async execute(command: AnswerQuestionComand): Promise {\n    this.logger.log(`In ${AnswerQuestionComandHandler.name}`);\n    const {\n      body: { questionId, answer },\n      user,\n    } = command;\n    let question: Question = null;\n    try {\n      question = await this.questionRepository.findOne({\n        where: { id: questionId },\n      });\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n    if (!question) {\n      throw new HttpException(\n        ErrorMessages.INVALID_QUESTION,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    const answerObject = {\n      userDisplayName: user.displayName,\n      user,\n      question,\n      answerBody: answer,\n    };\n    try {\n      await this.answerRepository.save(answerObject);\n      if (question.subscribeAnswer) {\n        this.logger.log('publishing answer event');\n        this.answerNotification.emit('answer', question.user.email);\n      }\n      this.logger.log('Done saving answer');\n      return 'Successful';\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerQuestionDto.html":{"url":"classes/AnswerQuestionDto.html","title":"class - AnswerQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/dto/answer-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                questionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/answer-question.dto.ts:18\n                        \n                    \n\n            \n                \n                    Answer to a question\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        questionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/answer-question.dto.ts:10\n                        \n                    \n\n            \n                \n                    ID of question being answered\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class AnswerQuestionDto {\n  /**\n   * ID of question being answered\n   * @example 20\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  questionId: number;\n\n  /**\n   * Answer to a question\n   * @example Very long answer summary\n   */\n  @IsString()\n  @IsNotEmpty()\n  answer: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nStackApiModule\n\nStackApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nStackApiModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StackApiModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_FILTER } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { StackApiModule } from './stack-api/stack-api.module';\nimport { HttpErrorFilter } from './util';\n\n@Module({\n  imports: [\n    StackApiModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.DATABASE_HOST,\n      port: 5432,\n      username: process.env.DATABASE_USERNAME,\n      password: process.env.DATABASE_PASSWORD,\n      database: process.env.DATABASE_NAME,\n      synchronize: false,\n      autoLoadEntities: true,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService,\n  {\n    provide: APP_FILTER,\n    useClass: HttpErrorFilter\n  }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AskQuestionCommand.html":{"url":"classes/AskQuestionCommand.html","title":"class - AskQuestionCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AskQuestionCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/ask-question/command.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommand\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                body\n                            \n                            \n                                    Public\n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(body: AskQuestionDto, user: User)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/ask-question/command.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        body\n                                                  \n                                                        \n                                                                        AskQuestionDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AskQuestionDto\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/ask-question/command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/ask-question/command.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ICommand } from '@nestjs/cqrs';\nimport { AskQuestionDto } from '../../dto';\nimport { User } from '../../entities';\n\nexport class AskQuestionCommand implements ICommand {\n  constructor(\n    public readonly body: AskQuestionDto,\n    public readonly user: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AskQuestionCommandHandler.html":{"url":"classes/AskQuestionCommandHandler.html","title":"class - AskQuestionCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AskQuestionCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/ask-question/handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/ask-question/handler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/ask-question/handler.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: AskQuestionCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/commands/ask-question/handler.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AskQuestionCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { AskQuestionCommand } from './command';\nimport { Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Question } from '../../entities';\nimport { Repository } from 'typeorm';\nimport { DatabaseException } from '../../../util/database-exception';\n\n@CommandHandler(AskQuestionCommand)\nexport class AskQuestionCommandHandler\n  implements ICommandHandler\n{\n  private readonly logger: Logger;\n  constructor(\n    @InjectRepository(Question)\n    private readonly repository: Repository,\n  ) {\n    this.logger = new Logger(AskQuestionCommandHandler.name);\n  }\n\n  async execute(command: AskQuestionCommand): Promise {\n    this.logger.log(`In ${AskQuestionCommandHandler.name}`);\n    const {\n      body: { title, question },\n      user,\n    } = command;\n    const questionObject = {\n      title,\n      questionBody: question,\n      user,\n      userDisplayName: user.displayName,\n    };\n    try {\n      const question = await this.repository.save(questionObject);\n      this.logger.log('Done saving question');\n      return question;\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AskQuestionDto.html":{"url":"classes/AskQuestionDto.html","title":"class - AskQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AskQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/dto/ask-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                question\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/ask-question.dto.ts:18\n                        \n                    \n\n            \n                \n                    Question body. A deeper explanation of the question\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/ask-question.dto.ts:10\n                        \n                    \n\n            \n                \n                    Title of the question\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\"\n\nexport class AskQuestionDto{\n    /**\n     * Title of the question\n     * @Example How does git work?\n     */\n    @IsString()\n    @IsNotEmpty()\n    title: string\n\n    /**\n     * Question body. A deeper explanation of the question\n     * @Example I tried doing blah blah\n     */\n    @IsString()\n    @IsNotEmpty()\n    question: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/controllers/Auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(body: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('/sign-in')\n                \n            \n\n            \n                \n                    Defined in src/stack-api/controllers/Auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(body: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('/sign-up')\n                \n            \n\n            \n                \n                    Defined in src/stack-api/controllers/Auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  HttpCode,\n  HttpStatus,\n  Body,\n  Logger,\n} from '@nestjs/common';\nimport { CommandBus } from '@nestjs/cqrs';\nimport { SignInCommand, SignUpCommand } from '../../commands';\nimport { SignInDto, SignUpDto } from '../../dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  private readonly logger: Logger;\n  constructor(private readonly commandBus: CommandBus) {\n    this.logger = new Logger(AuthController.name);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('/sign-up')\n  async signUp(@Body() body: SignUpDto) {\n    this.logger.log('In sign up controller');\n    this.logger.log(\n      `Calling commandBus.execute with an instance of ${SignUpCommand.name}`,\n    );\n    return await this.commandBus.execute(new SignUpCommand(body));\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('/sign-in')\n  async signIn(@Body() body: SignInDto) {\n    this.logger.log('In sign in controller');\n    this.logger.log(\n      `Calling commandBus.execute with an instance of ${SignInCommand.name}`,\n    );\n    return await this.commandBus.execute(new SignInCommand(body));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/stack-api/Guards/auth-guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, repository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/Guards/auth-guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/Guards/auth-guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../entities';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    @InjectRepository(User) private repository: Repository,\n    private configService: ConfigService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const {\n      headers: { authorization },\n    } = request;\n\n    if (!authorization) {\n      throw new HttpException('No Auth Token', HttpStatus.UNAUTHORIZED);\n    }\n    if (authorization.split(' ')[0] !== 'Bearer') {\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    }\n    const token = authorization.split(' ')[1];\n    let userEmail: string = '';\n    try {\n      const secret = this.configService.get('SECRET_KEY');\n      const { email } = this.jwtService.verify(token);\n      userEmail = email;\n    } catch (error) {\n      console.log(error);\n      throw new HttpException('Invalid Token', HttpStatus.UNAUTHORIZED);\n    }\n    request.user = await this.repository.findOne({\n      where: { email: userEmail },\n    });\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseException.html":{"url":"classes/DatabaseException.html","title":"class - DatabaseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/database-exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error: any)\n                    \n                \n                        \n                            \n                                Defined in src/util/database-exception.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/util/database-exception.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Logger } from \"@nestjs/common\";\n\nexport class DatabaseException extends HttpException{\n    private readonly logger: Logger\n    constructor(error: any) {\n        super({\n            status: HttpStatus.INTERNAL_SERVER_ERROR,\n            error: error,\n            message: 'Database Error',\n        }, HttpStatus.INTERNAL_SERVER_ERROR)\n        this.logger = new Logger(DatabaseException.name)\n        this.logger.log(error)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/http-error-filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/util/http-error-filter.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/util/http-error-filter.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/util/http-error-filter.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n  private readonly logger: Logger;\n  constructor() {\n    this.logger = new Logger();\n  }\n  catch(exception: HttpException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const status = exception.getStatus() || HttpStatus.INTERNAL_SERVER_ERROR;\n    const errorMessage = exception.message || 'Internal Server Error';\n\n    const errorResponseFormat = {\n      statusCode: status,\n      errorMessage,\n      method: request.method,\n      url: request.url,\n      time: new Date().toISOString(),\n    };\n\n    this.logger.log(\n      `Request method: ${request.method}, Request Url: ${\n        request.url\n      }, Response: ${JSON.stringify(errorResponseFormat)}`,\n    );\n\n    response.status(status).json(errorResponseFormat);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsValueExistConstraint.html":{"url":"injectables/IsValueExistConstraint.html","title":"injectable - IsValueExistConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsValueExistConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/shared/decorators/isValueExists.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/shared/decorators/isValueExists.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/shared/decorators/isValueExists.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/shared/decorators/isValueExists.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectEntityManager } from '@nestjs/typeorm';\nimport {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { Injectable } from '@nestjs/common';\nimport { EntityManager } from 'typeorm';\nimport { User } from '../../entities';\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsValueExistConstraint implements ValidatorConstraintInterface {\n  constructor(@InjectEntityManager() private entityManager: EntityManager) {}\n  async validate(args: ValidationArguments) {\n    const field = args.property;\n    const value = args.value;\n\n    return this.entityManager\n      .findOneBy(User, { [field]: value })\n      .then((element) => {\n        if (element) return false;\n        return true;\n      });\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `${args.property} already exists`;\n  }\n}\n\nexport function IsValueExists(validationOptions?: ValidationOptions) {\n  return function (object: unknown, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsValueExistConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Question.html":{"url":"entities/Question.html","title":"entity - Question","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/entities/questions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                creationDate\n                            \n                            \n                                id\n                            \n                            \n                                questionBody\n                            \n                            \n                                score\n                            \n                            \n                                subscribeAnswer\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userDisplayName\n                            \n                            \n                                vote\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Answer\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, answer => answer.question, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        questionBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscribeAnswer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDisplayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Votes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, votes => votes.question)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/questions.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { Answer } from './answer.entity';\nimport { User } from './user.entity';\nimport { Votes } from './votes.entity';\n\n@Entity()\nexport class Question {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @ManyToOne(() => User, (user) => user.id, {\n    eager: true,\n  })\n  user: User;\n\n  @Column()\n  userDisplayName: string;\n\n  @Column()\n  questionBody: string;\n\n  @Column({ default: true })\n  subscribeAnswer: boolean;\n\n  @Column({ default: 0 })\n  score: number;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  creationDate: Date;\n\n  @OneToMany(() => Answer, (answer) => answer.question, { eager: true })\n  answer: Answer;\n\n  @OneToMany(() => Votes, (votes) => votes.question)\n  vote: Votes;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/controllers/question/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                answerQuestion\n                            \n                            \n                                    Async\n                                askQuestion\n                            \n                            \n                                    Async\n                                viewQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        answerQuestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    answerQuestion(body: AnswerQuestionDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@ApiBearerAuth()@Post('/answer-question')\n                \n            \n\n            \n                \n                    Defined in src/stack-api/controllers/question/question.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AnswerQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        askQuestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    askQuestion(body: AskQuestionDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@ApiBearerAuth()@Post('/ask-question')\n                \n            \n\n            \n                \n                    Defined in src/stack-api/controllers/question/question.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AskQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        viewQuestions\n                        \n                    \n                \n            \n            \n                \n                    \n                    viewQuestions(param: ViewQuestionsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Get('/view-questions')\n                \n            \n\n            \n                \n                    Defined in src/stack-api/controllers/question/question.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                ViewQuestionsQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Logger,\n  HttpCode,\n  HttpStatus,\n  Get,\n  UseGuards,\n  Query,\n  Body,\n  Post,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  SerializeOptions,\n} from '@nestjs/common';\nimport { QueryBus, CommandBus } from '@nestjs/cqrs';\nimport { AnswerQuestionComand, AskQuestionCommand } from '../../commands';\nimport {\n  AnswerQuestionDto,\n  AskQuestionDto,\n  ViewQuestionsQueryDto,\n} from '../../dto';\nimport { User } from '../../entities';\nimport { AuthGuard } from '../../Guards';\nimport { ViewQuestionsQuery } from '../../queries';\nimport { SignedInUser } from '../../shared';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\n\n@UseGuards(AuthGuard)\n@UseInterceptors(ClassSerializerInterceptor)\n@SerializeOptions({ excludePrefixes: ['hashed'] })\n@ApiTags('question')\n@Controller('question')\nexport class QuestionController {\n  private readonly logger: Logger;\n  constructor(\n    private readonly queryBus: QueryBus,\n    private readonly commandBus: CommandBus,\n  ) {\n    this.logger = new Logger(QuestionController.name);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Get('/view-questions')\n  async viewQuestions(@Query() param: ViewQuestionsQueryDto) {\n    this.logger.log('In view questions controller');\n    this.logger.log(\n      `Calling queryBus.execute with an instance of ${ViewQuestionsQuery.name}`,\n    );\n    return await this.queryBus.execute(new ViewQuestionsQuery(param));\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @ApiBearerAuth()\n  @Post('/ask-question')\n  async askQuestion(@Body() body: AskQuestionDto, @SignedInUser() user: User) {\n    this.logger.log('In ask question controller');\n    this.logger.log(\n      `Calling commandBus.execute with an instance of ${AskQuestionCommand.name}`,\n    );\n    return await this.commandBus.execute(new AskQuestionCommand(body, user));\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @ApiBearerAuth()\n  @Post('/answer-question')\n  async answerQuestion(\n    @Body() body: AnswerQuestionDto,\n    @SignedInUser() user: User,\n  ) {\n    this.logger.log('In answer question controller');\n    this.logger.log(\n      `Calling commandBus.execute with an instance of ${AnswerQuestionComand.name}`,\n    );\n    return await this.commandBus.execute(new AnswerQuestionComand(body, user));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInCommand.html":{"url":"classes/SignInCommand.html","title":"class - SignInCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/sign-in/command.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommand\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                body\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(body: SignInDto)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/sign-in/command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        body\n                                                  \n                                                        \n                                                                        SignInDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SignInDto\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/sign-in/command.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ICommand } from '@nestjs/cqrs';\nimport { SignInDto } from '../../dto';\n\nexport class SignInCommand implements ICommand {\n  constructor(public readonly body: SignInDto) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInCommandHandler.html":{"url":"classes/SignInCommandHandler.html","title":"class - SignInCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/sign-in/handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/sign-in/handler.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/sign-in/handler.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: SignInCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/commands/sign-in/handler.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                SignInCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { Logger, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../../entities';\nimport { SignInCommand } from './command';\nimport { ErrorMessages } from '../../shared';\nimport * as bcrypt from 'bcryptjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { DatabaseException } from '../../../util/database-exception';\n\n@CommandHandler(SignInCommand)\nexport class SignInCommandHandler implements ICommandHandler {\n  private logger: Logger;\n  constructor(\n    @InjectRepository(User) private repository: Repository,\n    private jwtService: JwtService,\n  ) {\n    this.logger = new Logger(SignInCommandHandler.name);\n  }\n\n  async execute(command: SignInCommand): Promise {\n    this.logger.log(`In ${SignInCommandHandler.name}`);\n    const {\n      body: { email, password },\n    } = command;\n    let isUserExists: User = null;\n    try {\n      isUserExists = await this.repository.findOne({ where: { email } });\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n    if (!isUserExists) {\n      throw new HttpException(\n        ErrorMessages.INVALID_USER,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    const { hashedPassword } = isUserExists;\n    const isPasswordValid = await bcrypt.compare(password, hashedPassword);\n    if (!isPasswordValid) {\n      throw new HttpException(\n        ErrorMessages.INVALID_USER,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    const token = this.jwtService.sign({ email: isUserExists.email });\n    this.logger.log('Done sign-in user');\n    return { ...isUserExists, token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/sign-in.dto.ts:11\n                        \n                    \n\n            \n                \n                    User's email used at sign up\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/sign-in.dto.ts:19\n                        \n                    \n\n            \n                \n                    User's password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class SignInDto {\n  /**\n   * User's email used at sign up\n   * @example testemail@gmail.com\n   */\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * User's password\n   * @example 12345test\n   */\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpCommand.html":{"url":"classes/SignUpCommand.html","title":"class - SignUpCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/sign-up/sign-up.command.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommand\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                body\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(body: SignUpDto)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/sign-up/sign-up.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        body\n                                                  \n                                                        \n                                                                        SignUpDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SignUpDto\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/sign-up/sign-up.command.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ICommand } from '@nestjs/cqrs';\nimport { SignUpDto } from '../../dto';\n\nexport class SignUpCommand implements ICommand {\n  constructor(public readonly body: SignUpDto) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpCommandHandler.html":{"url":"classes/SignUpCommandHandler.html","title":"class - SignUpCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/sign-up/sign-up.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/sign-up/sign-up.handler.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/sign-up/sign-up.handler.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: SignUpCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/commands/sign-up/sign-up.handler.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                SignUpCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { SignUpCommand } from './sign-up.command';\nimport { Logger, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../../entities';\nimport * as bcrypt from 'bcryptjs';\nimport { ErrorMessages } from '../../shared';\nimport { JwtService } from '@nestjs/jwt';\nimport { DatabaseException } from '../../../util/database-exception';\n\n@CommandHandler(SignUpCommand)\nexport class SignUpCommandHandler implements ICommandHandler {\n  private readonly logger: Logger;\n  constructor(\n    @InjectRepository(User) private repository: Repository,\n    private jwtService: JwtService,\n  ) {\n    this.logger = new Logger(SignUpCommandHandler.name);\n  }\n\n  async execute(command: SignUpCommand): Promise {\n    this.logger.log(`In ${SignUpCommandHandler.name}`);\n    const {\n      body: { displayName, password, email, aboutMe },\n    } = command;\n    let hashedPassword: string = '';\n    try {\n      const salt = await bcrypt.genSalt(10);\n      hashedPassword = await bcrypt.hash(password, salt);\n    } catch (error) {\n      this.logger.log(`Error: ${error}`);\n      throw new HttpException(\n        ErrorMessages.ENCRYPTION_ERROR,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n    const signUpObject = {\n      displayName,\n      email,\n      aboutMe,\n      hashedPassword,\n    };\n    try {\n      const newUser = await this.repository.save(signUpObject);\n      const token = this.jwtService.sign({ email: newUser.email });\n      return { ...newUser, token };\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/dto/sign-up.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aboutMe\n                            \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aboutMe\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/sign-up.dto.ts:50\n                        \n                    \n\n            \n                \n                    User's profile summary\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsDefined()@IsValueExists()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/sign-up.dto.ts:22\n                        \n                    \n\n            \n                \n                    User's display name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@IsValueExists()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/sign-up.dto.ts:32\n                        \n                    \n\n            \n                \n                    user's email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsAlphanumeric()@Length(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/sign-up.dto.ts:42\n                        \n                    \n\n            \n                \n                    User's password. Must be a combination of letters and numbers.Must not be less than 8\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsEmail,\n  IsAlphanumeric,\n  Length,\n  IsOptional,\n  IsDefined,\n} from 'class-validator';\nimport { User } from '../entities';\nimport { IsValueExists } from '../shared';\n\nexport class SignUpDto {\n  /**\n   * User's display name\n   * @example amazingUser12\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  @IsValueExists()\n  displayName: string;\n\n  /**\n   * user's email address\n   * @example amazingUser@gmail.com\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @IsValueExists()\n  email: string;\n\n  /**\n   * User's password. Must be a combination of letters and numbers.Must not be less than 8\n   * @example 1234testyu\n   */\n  @IsNotEmpty()\n  @IsString()\n  @IsAlphanumeric()\n  @Length(8)\n  password: string;\n\n  /**\n   * User's profile summary\n   * @example I am software developer\n   */\n  @IsString()\n  @IsOptional()\n  aboutMe: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StackApiModule.html":{"url":"modules/StackApiModule.html","title":"module - StackApiModule","body":"\n                   \n\n\n\n\n    Modules\n    StackApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StackApiModule\n\n\n\ncluster_StackApiModule_providers\n\n\n\n\nIsValueExistConstraint\n\nIsValueExistConstraint\n\n\n\nStackApiModule\n\nStackApiModule\n\nStackApiModule -->\n\nIsValueExistConstraint->StackApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stack-api/stack-api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IsValueExistConstraint\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            QuestionController\n                        \n                        \n                            VoteController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { commandHandlers } from './commands';\nimport {\n  AuthController,\n  QuestionController,\n  VoteController,\n} from './controllers';\nimport { Answer, Question, User, Votes } from './entities';\nimport { IsValueExistConstraint } from './shared';\nimport { ConfigService } from '@nestjs/config';\nimport { queryHandlers } from './queries';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Question, Answer, Votes]),\n    CqrsModule,\n    JwtModule.register({\n      secret: `${new ConfigService().get('SECRET_KEY')}`,\n      signOptions: { expiresIn: '7 days' },\n    }),\n    ClientsModule.register([\n      {\n        name: 'NOTIFICATION',\n        transport: Transport.RMQ,\n        options: {\n          urls: [`${new ConfigService().get('URL')}`],\n          queue: 'NOTIFICATION',\n          queueOptions: {\n            durable: true,\n          },\n        },\n      },\n    ]),\n  ],\n  controllers: [AuthController, QuestionController, VoteController],\n  providers: [IsValueExistConstraint, ...commandHandlers, ...queryHandlers],\n})\nexport class StackApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aboutMe\n                            \n                            \n                                answer\n                            \n                            \n                                creationDate\n                            \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                hashedPassword\n                            \n                            \n                                id\n                            \n                            \n                                question\n                            \n                            \n                                vote\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aboutMe\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 256, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Answer\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, answer => answer.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashedPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, question => question.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Votes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, votes => votes.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Answer } from './answer.entity';\nimport { Question } from './questions.entity';\nimport { Votes } from './votes.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  displayName: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  hashedPassword: string;\n\n  @Column({ length: 256, nullable: true })\n  aboutMe: string;\n\n  @OneToMany(() => Question, (question) => question.user)\n  question: Question;\n\n  @OneToMany(() => Answer, (answer) => answer.user)\n  answer: Answer;\n\n  @OneToMany(() => Votes, (votes) => votes.user)\n  vote: Votes;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  creationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewQuestionsQuery.html":{"url":"classes/ViewQuestionsQuery.html","title":"class - ViewQuestionsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewQuestionsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/queries/view-questions/query.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQuery\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                param\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(param: ViewQuestionsQueryDto)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/queries/view-questions/query.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        param\n                                                  \n                                                        \n                                                                        ViewQuestionsQueryDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        param\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ViewQuestionsQueryDto\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/queries/view-questions/query.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IQuery } from '@nestjs/cqrs';\nimport { ViewQuestionsQueryDto } from '../../dto';\n\nexport class ViewQuestionsQuery implements IQuery {\n  constructor(public readonly param: ViewQuestionsQueryDto) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewQuestionsQueryDto.html":{"url":"classes/ViewQuestionsQueryDto.html","title":"class - ViewQuestionsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewQuestionsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/dto/view-questions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/view-questions.dto.ts:12\n                        \n                    \n\n            \n                \n                    Number of data to return.Defaults to 10\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/view-questions.dto.ts:21\n                        \n                    \n\n            \n                \n                    Number of data to skip.Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class ViewQuestionsQueryDto {\n  /**\n   * Number of data to return.Defaults to 10\n   * @example 20\n   */\n  @IsInt()\n  @IsOptional()\n  @Type(() => Number)\n  limit: number;\n\n  /**\n   * Number of data to skip.Defaults to 0\n   * @example 1\n   */\n  @IsInt()\n  @IsOptional()\n  @Type(() => Number)\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewQuestionsQueryHandler.html":{"url":"classes/ViewQuestionsQueryHandler.html","title":"class - ViewQuestionsQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewQuestionsQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/queries/view-questions/handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/queries/view-questions/handler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/queries/view-questions/handler.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(query: ViewQuestionsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/queries/view-questions/handler.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ViewQuestionsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { Logger } from '@nestjs/common';\nimport { ViewQuestionsQuery } from './query';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Question } from '../../entities';\nimport { Repository } from 'typeorm';\nimport { DatabaseException } from '../../../util/database-exception';\n\n@QueryHandler(ViewQuestionsQuery)\nexport class ViewQuestionsQueryHandler\n  implements IQueryHandler\n{\n  private logger: Logger;\n  constructor(\n    @InjectRepository(Question) private repository: Repository,\n  ) {\n    this.logger = new Logger(ViewQuestionsQueryHandler.name);\n  }\n\n  async execute(query: ViewQuestionsQuery): Promise {\n    this.logger.log(`In ${ViewQuestionsQueryHandler.name}`);\n    const {\n      param: { limit, offset },\n    } = query;\n    try {\n      const questions = await this.repository.find({\n        skip: offset || 0,\n        take: limit || 10,\n        order: { creationDate: 'DESC' },\n      });\n      this.logger.log('Done fetching Questions');\n      return questions;\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VoteCommand.html":{"url":"classes/VoteCommand.html","title":"class - VoteCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VoteCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/vote/command.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommand\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                body\n                            \n                            \n                                    Public\n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(body: VoteDto, user: User)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/vote/command.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        body\n                                                  \n                                                        \n                                                                        VoteDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VoteDto\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/vote/command.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/vote/command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ICommand } from '@nestjs/cqrs';\nimport { VoteDto } from '../../dto';\nimport { User } from '../../entities';\n\nexport class VoteCommand implements ICommand {\n  constructor(public readonly body: VoteDto, public readonly user: User) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VoteCommandHandler.html":{"url":"classes/VoteCommandHandler.html","title":"class - VoteCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VoteCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/commands/vote/handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Async\n                                updateScore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(votesRepository: Repository, questionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stack-api/commands/vote/handler.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        votesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/stack-api/commands/vote/handler.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: VoteCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/commands/vote/handler.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                VoteCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateScore\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateScore(id: number, scoreAmount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stack-api/commands/vote/handler.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scoreAmount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { VoteCommand } from './command';\nimport { Logger, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Question, Votes } from '../../entities';\nimport { Repository } from 'typeorm';\nimport { ErrorMessages } from '../../shared';\nimport { DatabaseException } from '../../../util/database-exception';\n\n@CommandHandler(VoteCommand)\nexport class VoteCommandHandler implements ICommandHandler {\n  private readonly logger: Logger;\n  constructor(\n    @InjectRepository(Votes)\n    private votesRepository: Repository,\n    @InjectRepository(Question)\n    private questionRepository: Repository,\n  ) {\n    this.logger = new Logger(VoteCommandHandler.name);\n  }\n\n  async execute(command: VoteCommand): Promise {\n    this.logger.log(`In ${VoteCommandHandler.name}`);\n    const {\n      body: { voteType, questionId },\n      user,\n    } = command;\n    let question: Question = null;\n    try {\n      question = await this.questionRepository.findOne({\n        where: { id: questionId },\n      });\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n    if (!question) {\n      throw new HttpException(\n        ErrorMessages.INVALID_QUESTION,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    let isVoteExists: Votes = null;\n    try {\n      isVoteExists = await this.votesRepository.findOne({\n        relations: { question: true, user: true },\n        where: { question: { id: questionId }, user: { id: user.id } },\n      });\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n    if (isVoteExists) {\n      if (isVoteExists.voteType === voteType) {\n        throw new HttpException(\n          'Cannot place same vote type twice',\n          HttpStatus.BAD_REQUEST,\n        );\n      } else if (isVoteExists.voteType === 'UP') {\n        try {\n          await this.votesRepository.update(isVoteExists.id, {\n            voteType: 'DOWN',\n          });\n        } catch (error) {\n          throw new DatabaseException(error);\n        }\n        await this.updateScore(questionId, -1);\n        return 'downvote successful';\n      } else {\n        try {\n          await this.votesRepository.update(isVoteExists.id, {\n            voteType: 'UP',\n          });\n        } catch (error) {\n          throw new DatabaseException(error);\n        }\n        await this.updateScore(questionId, +1);\n        return 'upvote successful';\n      }\n    } else {\n      const voteObject = {\n        user,\n        question,\n        voteType,\n      };\n      try {\n        await this.votesRepository.save(voteObject);\n      } catch (error) {\n        throw new DatabaseException(error);\n      }\n      if (voteType === 'UP') {\n        await this.updateScore(questionId, +1);\n      } else {\n        await this.updateScore(questionId, -1);\n      }\n      this.logger.log('Done saving vote');\n      return `${voteType.toLowerCase()}vote successful`;\n    }\n  }\n\n  async updateScore(id: number, scoreAmount: number): Promise {\n    this.logger.log('In update score method');\n    let score: number = 0;\n    try {\n      const question = await this.questionRepository.findOne({ where: { id } });\n      score += question.score + scoreAmount;\n      await this.questionRepository.update(id, { score: score });\n      this.logger.log('Done updating score');\n    } catch (error) {\n      throw new DatabaseException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VoteController.html":{"url":"controllers/VoteController.html","title":"controller - VoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/controllers/vote/vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                vote\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                voteQuestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteQuestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteQuestion(body: VoteDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('/')\n                \n            \n\n            \n                \n                    Defined in src/stack-api/controllers/vote/vote.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                VoteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Logger,\n  Post,\n  HttpCode,\n  HttpStatus,\n  Body,\n  UseGuards,\n} from '@nestjs/common';\nimport { CommandBus } from '@nestjs/cqrs';\nimport { VoteCommand } from '../../commands';\nimport { VoteDto } from '../../dto';\nimport { User } from '../../entities';\nimport { AuthGuard } from '../../Guards';\nimport { SignedInUser } from '../../shared';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\n\n@UseGuards(AuthGuard)\n@ApiBearerAuth()\n@ApiTags('vote')\n@Controller('vote')\nexport class VoteController {\n  public readonly logger: Logger;\n  constructor(private readonly commandBus: CommandBus) {\n    this.logger = new Logger(VoteController.name);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('/')\n  async voteQuestion(@Body() body: VoteDto, @SignedInUser() user: User) {\n    this.logger.log('In vote question controller');\n    this.logger.log(\n      `Calling commandBus.execute with an instance of ${VoteCommand.name}`,\n    );\n    return await this.commandBus.execute(new VoteCommand(body, user));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VoteDto.html":{"url":"classes/VoteDto.html","title":"class - VoteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VoteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/dto/vote.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                questionId\n                            \n                            \n                                voteType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        questionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/vote.dto.ts:20\n                        \n                    \n\n            \n                \n                    ID of question to vote\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voteType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEnum(VoteType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/dto/vote.dto.ts:12\n                        \n                    \n\n            \n                \n                    Type of vote. should be either UP(upvote) or DOWN(downvote)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { VoteType } from '../shared';\n\nexport class VoteDto {\n  /**\n   * Type of vote. should be either UP(upvote) or DOWN(downvote)\n   * @example UP\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(VoteType)\n  voteType: string;\n\n  /**\n   * ID of question to vote\n   * @example 1\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  questionId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Votes.html":{"url":"entities/Votes.html","title":"entity - Votes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Votes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack-api/entities/votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creationDate\n                            \n                            \n                                id\n                            \n                            \n                                question\n                            \n                            \n                                user\n                            \n                            \n                                voteType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/votes.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/votes.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, question => question.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/votes.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/votes.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voteType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stack-api/entities/votes.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  Column,\n} from 'typeorm';\nimport { Question } from './questions.entity';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Votes {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => User, (user) => user.id)\n  user: User;\n\n  @ManyToOne(() => Question, (question) => question.id)\n  question: Question;\n\n  @Column()\n  voteType: string;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  creationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            port\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/Guards/auth-guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stack-api/commands/answer-question/comand.ts\n            \n            class\n            AnswerQuestionComand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/commands/answer-question/handler.ts\n            \n            class\n            AnswerQuestionComandHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/commands/ask-question/command.ts\n            \n            class\n            AskQuestionCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/commands/ask-question/handler.ts\n            \n            class\n            AskQuestionCommandHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/commands/index.ts\n            \n            variable\n            commandHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/commands/sign-in/command.ts\n            \n            class\n            SignInCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stack-api/commands/sign-in/handler.ts\n            \n            class\n            SignInCommandHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/commands/sign-up/sign-up.command.ts\n            \n            class\n            SignUpCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stack-api/commands/sign-up/sign-up.handler.ts\n            \n            class\n            SignUpCommandHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/commands/vote/command.ts\n            \n            class\n            VoteCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/commands/vote/handler.ts\n            \n            class\n            VoteCommandHandler\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stack-api/controllers/Auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stack-api/controllers/question/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/controllers/vote/vote.controller.ts\n            \n            controller\n            VoteController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stack-api/dto/answer-question.dto.ts\n            \n            class\n            AnswerQuestionDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/stack-api/dto/ask-question.dto.ts\n            \n            class\n            AskQuestionDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/stack-api/dto/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/stack-api/dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/stack-api/dto/view-questions.dto.ts\n            \n            class\n            ViewQuestionsQueryDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/stack-api/dto/vote.dto.ts\n            \n            class\n            VoteDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/stack-api/entities/answer.entity.ts\n            \n            entity\n            Answer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/entities/questions.entity.ts\n            \n            entity\n            Question\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/entities/votes.entity.ts\n            \n            entity\n            Votes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/queries/index.ts\n            \n            variable\n            queryHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/queries/view-questions/handler.ts\n            \n            class\n            ViewQuestionsQueryHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/queries/view-questions/query.ts\n            \n            class\n            ViewQuestionsQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stack-api/shared/decorators/isValueExists.ts\n            \n            injectable\n            IsValueExistConstraint\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stack-api/shared/decorators/isValueExists.ts\n            \n            function\n            IsValueExists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stack-api/shared/decorators/user.decorator.ts\n            \n            variable\n            SignedInUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/database-exception.ts\n            \n            class\n            DatabaseException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/util/http-error-filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/cqrs : ^9.0.1\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/microservices : ^9.2.1\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            amqp-connection-manager : ^4.1.9\n        \n            amqplib : ^0.10.3\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            helmet : ^6.0.1\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ErrorMessages   (src/.../errorMessages.enum.ts)\n                        \n                        \n                            VoteType   (src/.../vote-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/stack-api/shared/constants/errorMessages.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorMessages\n                    \n                \n                        \n                            \n                                 ENCRYPTION_ERROR\n                            \n                        \n                        \n                            \n                                Value : Unable to Encrypt password\n                            \n                        \n                        \n                            \n                                 DATABASE_ERROR\n                            \n                        \n                        \n                            \n                                Value : Database Error\n                            \n                        \n                        \n                            \n                                 INVALID_USER\n                            \n                        \n                        \n                            \n                                Value : Invalid user credentials\n                            \n                        \n                        \n                            \n                                 INVALID_QUESTION\n                            \n                        \n                        \n                            \n                                Value : Invalid Question ID\n                            \n                        \n            \n        \n\n    src/stack-api/shared/constants/vote-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        VoteType\n                    \n                \n                        \n                            \n                                 UP\n                            \n                        \n                        \n                            \n                                Value : UP\n                            \n                        \n                        \n                            \n                                 DOWN\n                            \n                        \n                        \n                            \n                                Value : DOWN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsValueExists   (src/.../isValueExists.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/stack-api/shared/decorators/isValueExists.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsValueExists\n                        \n                    \n                \n            \n            \n                \nIsValueExists(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StackApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_StackApiModule\n\n\n\ncluster_StackApiModule_providers\n\n\n\n\nStackApiModule\n\nStackApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nStackApiModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nIsValueExistConstraint\n\nIsValueExistConstraint\n\nStackApiModule -->\n\nIsValueExistConstraint->StackApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            commandHandlers   (src/.../index.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            port   (src/.../main.ts)\n                        \n                        \n                            queryHandlers   (src/.../index.ts)\n                        \n                        \n                            SignedInUser   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/stack-api/commands/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        commandHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  SignUpCommandHandler,\n  SignInCommandHandler,\n  AskQuestionCommandHandler,\n  AnswerQuestionComandHandler,\n  VoteCommandHandler,\n]\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('main')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 8080\n                    \n                \n\n\n        \n    \n\n    src/stack-api/queries/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        queryHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [ViewQuestionsQueryHandler]\n                    \n                \n\n\n        \n    \n\n    src/stack-api/shared/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignedInUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user = request.user;\n    return data ? user?.[data] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
